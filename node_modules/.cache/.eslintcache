[{"/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/index.js":"1","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/App.js":"2","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/sales-list.js":"3","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/analyze.js":"4","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/login.js":"5","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/management.component.js":"6","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/graphs/graph3.component.js":"7","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/graphs/graph1.component.js":"8","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/graphs/graph2.component.js":"9","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/services/sales.js":"10","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/services/priceFormatter.js":"11","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/services/stores.js":"12","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/http-common.js":"13"},{"size":240,"mtime":1640271848055,"results":"14","hashOfConfig":"15"},{"size":3664,"mtime":1642247574126,"results":"16","hashOfConfig":"15"},{"size":10097,"mtime":1642246699004,"results":"17","hashOfConfig":"15"},{"size":2439,"mtime":1642159994835,"results":"18","hashOfConfig":"15"},{"size":6320,"mtime":1642247635469,"results":"19","hashOfConfig":"15"},{"size":12533,"mtime":1642240978442,"results":"20","hashOfConfig":"15"},{"size":6088,"mtime":1642089659645,"results":"21","hashOfConfig":"15"},{"size":4017,"mtime":1642093645943,"results":"22","hashOfConfig":"15"},{"size":3634,"mtime":1642089440268,"results":"23","hashOfConfig":"15"},{"size":1473,"mtime":1642166963219,"results":"24","hashOfConfig":"15"},{"size":459,"mtime":1641962806116,"results":"25","hashOfConfig":"15"},{"size":155,"mtime":1642166980215,"results":"26","hashOfConfig":"15"},{"size":171,"mtime":1642166897938,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fix6ph",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/index.js",[],"/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/App.js",["60","61","62","63","64"],"import './App.css';\nimport React from 'react';\nimport { Route, Routes, Link  } from 'react-router-dom' ;\nimport \"bootstrap/dist/css/bootstrap.min.css\" ;\nimport  SalesList  from './components/sales-list.js';\nimport  Login  from './components/login.js';\nimport AnalyzeSales from './components/analyze.js';\nimport ManagementTools from './components/management.component';\nimport Graph1 from './components/graphs/graph1.component';\nimport Graph2 from './components/graphs/graph2.component';\nimport Graph3 from './components/graphs/graph3.component';\n\nfunction App() {\n\n  const [user, setUser] = React.useState(null)\n  const [state, setState] = React.useState(false)\n    \n  async function login(user) {\n    setUser(user)\n    setState(true)\n  }\n\n  async function logout() {\n    setUser(null);\n    setState(false)\n  }\n\n  return (\n      <div className=\"App\">\n\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <a href=\"/supply\" className=\"navbar-brand\">\n            EinStop\n          </a>\n          <div className=\"navbar-nav ml-auto pull-right\">\n            {\n              user ? \n                  <Link to=\"/supply/sales\">\n                    <li class=\"nav-item\">\n                      <a className=\"nav-link\" >Monitor Sales</a>\n                    </li>\n                  </Link> \n              :\n              null\n            }\n            \n            {\n              user ? \n                  <Link to=\"/supply/analyze\">\n                      <li class=\"nav-item\">\n                        <a className=\"nav-link\" >Analyze Sales</a>\n                      </li>\n                  </Link>\n                  :\n                  null\n            }\n\n            {\n              user ? \n                  <Link to=\"/supply/tools\">\n                      <li class=\"nav-item\">\n                        <a className=\"nav-link\" >Management Tools</a>\n                      </li>\n                  </Link>\n                  :\n                  null\n            }\n            \n                        \n            { \n              user ? (\n              <li className=\"nav-item\" >\n                <Link to=\"/\">\n                  <a onClick={logout} className=\"nav-link\" style={{cursor:'pointer'}}>\n                    Logout {user.name}\n                  </a>\n                </Link>\n              </li>\n                ) : (           \n              <Link to=\"/supply\">\n                  <li className=\"nav-item\" >\n                    <a className=\"nav-link\">Login</a>\n                  </li>\n              </Link>\n              )\n            }\n            \n           {\n           user?\n           null\n          :\n          <div className='text-gray'>\n          Username:admin <br/>\n          Password:001    \n        </div>\n          }\n          </div>\n        </nav> \n\n        <div className=\"container mt-3\">\n          <Routes>\n\n            <Route path=\"/supply\" element={<Login login={login}/>}\n            />\n              \n            <Route path=\"/supply/sales\" element={<SalesList loggedIn={state} login={login}/>}/>\n                          \n            <Route \n              path='/supply/analyze'\n              element={<AnalyzeSales loggedIn={state} login={login}/>}\n            />\n\n            <Route\n              path='/supply/tools'\n              element={<ManagementTools loggedIn={state} login={login}/>}\n            />\n\n          <Route path='/analyze/graph1' element={<Graph1/>}\n          />\n          <Route path='/analyze/graph2' element={<Graph2 />} \n          />\n          <Route path='/analyze/graph3' element={<Graph3 />}\n          />\n\n\n          </Routes> \n        </div> \n      \n    </div>\n  );\n}\n\nexport default App;\n","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/sales-list.js",["65","66","67","68","69","70","71","72","73","74","75","76"],"import React, { useState } from 'react';\nimport SalesDataService from '../services/sales.js'\nimport { useEffect } from 'react';\nimport '../App.css'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Chart } from \"react-google-charts\";\nimport dayjs from 'dayjs' ;\nimport priceFormatter from '../services/priceFormatter.js'\nimport {Link, Route, Routes} from 'react-router-dom' ;\nimport Login from './login.js'\n\n\nconst SalesList = props => {\n  const [sales, setSales] = React.useState([])\n  const [queryLocation, setQueryLocation] = React.useState(\"\")\n  const [queryCoupons, setQueryCoupons] = React.useState()\n  const [queryPurchaseMethod, setQueryPurchaseMethod] = React.useState(\"\")\n  const [purchaseMethods, setPurchaseMethods] = React.useState([\"Any\"]);\n  const [pages, setQueryPage] = React.useState(0) \n  const [locations,  setLocations] = React.useState([\"All\"])\n  const [startDate, setstartDate] = React.useState(new Date('1/2/2013'))\n  const [endDate, setendDate] = React.useState(new Date('12/30/2017'))\n  const [NoSalesFlag, setNoSalesFlag] = React.useState(false)\n  const [modifiedSales, setModifiedSales] = React.useState(null)\n  const [totalSales, settotalSales] = useState(0)\n  const [revenue, setRevenue]=useState(0.0)\n  const [minDate, setMinDate] = useState(new Date('1/2/2013'))\n  const [maxDate, setMaxDate] = useState(new Date('12/30/2017'))\n  const [trigger, setTrigger] = useState(false)\n  \n  useEffect(() => {\n    retrieveSales();\n    retrievePurchaseMethod();\n    retrieveLocations();\n  }, []);\n\n\n  const onChangeQueryLocation = e => {\n    const searchLocation = e.target.value;\n    setQueryLocation(searchLocation);\n  };\n\n  const onChangeQueryCoupons = e => {\n    const searchCoupons = (e.target.checked?true:false)\n    setQueryCoupons(searchCoupons);\n  };\n\n  const onChangeQueryPurchaseMethod = e => {\n    const searchPurchaseMethod = e.target.value;\n    setQueryPurchaseMethod(searchPurchaseMethod);\n  };\n\n  const onChangeSetstartDate = e => {\n    setstartDate(e)\n  }\n\n  const onChangeSetendDate = e => {\n    setendDate(e)\n  }\n\n  const retrieveSales = () => {\n    SalesDataService.getAll()\n      .then(response => {\n        setSales(response.data.Sales);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n      setNoSalesFlag(true)\n  };\n\n  const retrievePurchaseMethod = () => {\n    SalesDataService.getPurchaseMethod()\n      .then(response => {\n        setPurchaseMethods([\"Any\"].concat(response.data));\n        setNoSalesFlag(true)\n      })\n      .catch(e => {\n        console.log(e);\n      });\n      \n  };\n\n  const retrieveLocations = () => {\n    SalesDataService.getStoreLocations()\n    .then(response => {\n      setLocations([\"All\"].concat(response.data));\n      setNoSalesFlag(true)\n    })\n    .catch(e => {\n      console.log(e);\n    });\n  }\n\n  const refreshList = () => {\n    retrieveSales();\n    setNoSalesFlag(true)\n  };\n\n  const find = (query, by) => {\n    SalesDataService.find(query, by)\n      .then(response => {\n        \n        setSales(response.data.Sales);\n\n        modifySalesFormat() \n        setNoSalesFlag(true)\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const modifySalesFormat = () => {\n    \n    var modified = [['Location','Date (MM-DD-YYYY)','Customer','Rating','Purchase Method','Coupon used']]\n    var total=0;\n    var revenue=0\n    sales.map(sale => {\n      if(dayjs(sale.saleDate) > dayjs(startDate) && dayjs(sale.saleDate) < dayjs(endDate)) {\n        var m = []\n        m.push(sale.storeLocation)\n        m.push(dayjs(sale.saleDate).format('MM-DD-YYYY'))\n        m.push(sale.customer.email)\n        m.push(sale.customer.satisfaction)\n        m.push(sale.purchaseMethod)\n        m.push(sale.couponUsed)\n        modified.push(m) \n        sale.items.map(item=>{\n          total+=(parseInt(item.quantity))\n          revenue+=(parseInt(item.quantity)*item.price['$numberDecimal'])\n        })\n      }\n    })\n\n    modified.sort((a,b) => (dayjs(b[1]).toDate())-(dayjs(a[1]).toDate()))\n\n    if(modified.length>1) {\n      setModifiedSales(modified)\n      settotalSales(total)\n      setRevenue(revenue)\n    }\n\n  }\n\n  const findAllFilters = () => {\n    if(queryLocation === \"Any\") queryLocation = null\n    if(queryPurchaseMethod === \"All\") queryPurchaseMethod = null\n    SalesDataService.findAll(queryLocation, queryPurchaseMethod, queryCoupons)\n    .then(response => {\n      setSales(response.data.Sales)\n      modifySalesFormat(sales)\n    })\n    .catch(e => {\n        console.log(e)\n    })\n  }\n\n  return (\n      props.loggedIn ? ( \n      <div className='container wrapper App'>\n      <div className='row py-3'>\n        <div className=\"col-2\">\n        <div class=\"sticky-top\">\n        <div class=\"nav flex-column\">     \n          <div className=\"form-outline form-white\">\n              <select class=\"form-control selectinput\" type=\"select\" onChange={onChangeQueryPurchaseMethod}>\n                {\n                  purchaseMethods.map(method => {\n                    return (\n                      <option value={method}> {method} </option>\n                    )\n                  })\n                }\n              </select>\n              <label class=\"form-label\" for=\"formWhite1\">Purchase Method</label>\n          </div>\n        <div className=\"form-outline form-white\">\n          <select class=\"form-control selectinput\" type='select'  onChange={onChangeQueryLocation}>\n              {\n                locations.map(method => {\n                  return (\n                    <option value={method}> {method} </option>\n                  )\n                })\n              }\n            </select>\n            <label class=\"form-label\" for=\"formWhite2\">Location</label>\n            {/* <div className=\"input-group-append\">\n                <button className=\"btn btn-outline-dark\" onClick={findByLocation}>Apply</button>\n            </div> */}\n        </div>\n        <div className=\"form-outline form-white\">\n            <DatePicker\n                className='form-control input'\n\t\t\t\t\t\t\t\tid=\"startDate\"\n\t\t\t\t\t\t\t\tonChange={onChangeSetstartDate}\n\t\t\t\t\t\t\t\tselected={minDate}\n                startDate={minDate}\n                endDate={maxDate}\n\t\t\t\t\t\t\t/>\n            <label class=\"form-label\" for=\"formWhite3\">From</label>\n        </div>\n        <div className=\"form-outline form-white\">\n            <DatePicker\n                className='form-control input' \n\t\t\t\t\t\t\t\tid=\"endDate\"\n\t\t\t\t\t\t\t\tonChange={onChangeSetendDate}\n\t\t\t\t\t\t\t\tselected={maxDate}\n                startDate={minDate}\n                endDate={maxDate}\n\t\t\t\t\t\t\t/>\n              <label class=\"form-label\" for=\"formWhite4\">To</label>\n        </div>   \n        <div class=\"custom-control custom-switch\">\n          <input type=\"checkbox\"  class=\"regular-checkbox big-checkbox\" onChange={onChangeQueryCoupons} id=\"customSwitch2\" />\n        </div>\n        <label class=\"form-label\" for=\"formWhite6\">Coupons</label>\n        <br/>\n        <br/>\n        <div className=\"input-group-append mb-3\">\n          <button\n            className=\"btn btn-outline-dark\"\n            type=\"button\"\n            onClick={findAllFilters}\n          >\n            Apply All Filters\n          </button>\n        </div>\n      </div>  \n        <br/>\n        <br/>\n        <div className='row py-3'>\n        <div className=\"col-12\">\n              <div className=\"card\">\n                <div className=\"card-body card-bg-dark \">\n                  <h5 className=\"card-title card-bg-dark\">STATS</h5>\n                  <p className=\"card-text card-bg-dark\">\n                    <strong>Total Sales : </strong>{priceFormatter(totalSales)}<br/>\n                    <strong>Revenue: </strong>{priceFormatter(Math.trunc(revenue))}<br/>\n                  </p>\n                </div>\n              </div>\n            </div>\n      </div>\n      </div> \n      </div>\n      <div className='col-1'></div>\n      <div className=\"col\">\n      { \n        NoSalesFlag && modifiedSales ?\n        <Chart\n            chartType=\"Table\"\n            width=\"100%\"\n            height=\"100%\"\n            data={modifiedSales}\n            options={{     \n              allowHtml: true,\n              title: \"Sales\",\n              legend: { position: \"top\" },\n              pageSize: 25,\n              width:\"100%\",\n              height:\"100%\",\n              cssClassNames: {\n                'headerRow': 'font-color-white large-font bold-font black-background gold-border',\n                'tableRow': 'light-coral-background font-color-black bold-font',\n                'oddTableRow': 'orange-background font-color-black bold-font',\n                'selectedTableRow': 'light-orange-background large-font',\n                'hoverTableRow': 'light-orange-background large-font',\n                'headerCell': 'gold-border',\n                'tableCell': 'text-font right-text deeppink-border',\n                'rowNumberCell': 'underline-blue-font',\n                'footer':'black-background'\n              }            \n            }}\n          /> :\n          <div class=\"jumbotron jumbotron-fluid\">\n          <div class=\"container\">\n            <h1 class=\"display-4\">No Such Sales Exist :(</h1>\n            <p class=\"lead\">Try the following<br/>\n              <li>Change the filters</li>\n              <li>Click on <div className='text-italics'>Apply All Filters</div> two times if <div className='text-italics'>desired</div> results are not obtained</li>\n              <li>Currently only sales dated between <div className='text-italics'>2013</div> and <div className=\"text-italics\">2017</div> exist</li>\n            </p>\n          </div>\n        </div>\n      } \n      </div>\n      </div>\n    </div>\n    ) :\n    (<div>\n    <div class=\"jumbotron jumbotron-fluid\">\n      <div class=\"container\">\n        <h1 class=\"display-4\">Log In to continue</h1>\n        <p class=\"lead\">Head on to <Link to='/supply'>Login Page</Link></p>\n      </div>\n    </div>\n     <div className=\"container mt-3\">\n     <Routes>\n       <Route path=\"/supply\" element={<Login login={props.login}/>}\n       />\n     </Routes>\n     </div>\n     </div>\n    )\n   \n  );\n}\n\nexport default SalesList;","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/analyze.js",[],"/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/login.js",[],"/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/management.component.js",["77","78","79","80","81","82","83"],"import React, { useEffect, useState } from 'react';\nimport {Link,Routes,Route} from 'react-router-dom';\nimport StoresDataService from '../services/stores.js' ;\nimport SalesDataService from '../services/sales.js' ;\nimport priceFormatter from '../services/priceFormatter.js';\nimport DatePicker from 'react-datepicker';\nimport Box from '@mui/material/Box';\nimport dayjs from 'dayjs'\nimport Popper from '@mui/material/Popper';\n\nconst ManagementTools = (props) => {\n    const [stores, setStores] = useState([])    \n    const [numStores, setNumStores] = useState(0)\n    const [currStore, setCurrStore] = useState(0)\n    const [revenue, setRevenue] = useState([])\n    const [saved, setSaved] = useState()\n    const [details, setDetails] = useState([])\n    const [displayDetails, setDisplayDetails] = useState(null)\n    const [ranks, setRanks] = useState([])\n    const [stats, setStats] = useState([])\n    const [rote, setROTE] = useState()\n    const [spa, setspa] = useState()\n    const [surpriseVisit, setSurpriseVisit] = useState(false)\n    const [minDate, setMinDate] = useState(new Date())\n    const [maxDate, setMaxDate] = useState(new Date()+7)\n    const [DOV, setDOV] = useState(new Date())\n    const [visit, setVisit]=useState(false) \n    const [anchorEl, setAnchorEl] = React.useState(null)\n    const [mailSent, setMailSent] = useState(false)\n    \n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popper' : undefined;\n  \n  useEffect(() => {\n    retrieveLocations()\n    retrieveSales()    \n  }, [saved]); \n\n  const reload = () => {\n    setSaved(false);\n  }\n \n  const retrieveSales = () => {\n    if(stores.length>0) {\n      var listRevenue = []\n      var listStores = []\n      var stats = []\n      stores.forEach(loc=>{\n        SalesDataService.find(loc,\"location\")\n          .then(res=>{\n            const sales = res.data.Sales\n            var revenuel=0.0\n            sales.forEach(sale=>{\n              sale.items.forEach(item=>{\n                revenuel+=(parseInt(item.quantity)*item.price['$numberDecimal'])\n              })\n            })\n            \n            if(listRevenue.length===0) {\n              listRevenue = [revenuel]\n              listStores = [loc]\n            }\n            else {\n              listStores.splice(listRevenue.length, 0, loc)\n              listRevenue.splice(listRevenue.length, 0, revenuel)\n            }\n\n            details.forEach(det=>{\n              if(det.location===loc) {\n                  const sales = listRevenue.at(-1)\n                  // const rent = det.rent['$numberDecimal']\n                  const staff = parseInt(det.numStaff)\n                  const area = parseInt(det.area)\n\n                  const ROTE = sales/staff \n                  const salespa = sales/area\n\n                  // const val = ROTE+salespa-(rent*area)\n                  \n                  stats.push({'location':loc,'rote':ROTE,'salesByarea':salespa})\n\n                  if(loc===stores[currStore]) {\n                    setDisplayDetails(det)\n                  }\n                }\n            })\n\n\n            if(listRevenue.length === numStores) {\n              setStores(listStores)\n              setRevenue(listRevenue)\n              setStats(stats)\n              retrieveDetails(listStores[currStore])\n            }\n\n          })\n          .catch(e=>{console.log(e.message);})\n\n\n      }) \n    }\n  }\n\n  const retrieveLocations = () => {\n    StoresDataService.getStores()\n      .then(res=>{\n        const data = res.data.Stores\n        const names=data.map(store=>{\n          return store.location\n        })\n        setDetails(data)\n        setStores(names)\n        setNumStores(res.data.Stores.length)  \n        reload()\n      })\n      .catch(e=>{console.log(e.message)})\n  }\n\n  const nextStore = e => {\n    const next = (currStore+1)%numStores\n    setCurrStore(next)\n    retrieveDetails(stores[next])\n    setVisit(false)\n    setSurpriseVisit(false)\n    setDOV(new Date())\n  }\n\n  const prevStore = e => {\n    const prev = (currStore>0?(currStore-1):(numStores-1))\n    setCurrStore(prev)\n    retrieveDetails(stores[prev])\n    setVisit(false)\n    setSurpriseVisit(false)\n    setDOV(new Date())\n  }\n\n  const retrieveDetails = (loc) => {\n    stats.forEach(s=>{\n      if(s.location===loc) {\n        setROTE(s.rote)\n        setspa(s.salesByarea)\n      }\n    })\n    details.forEach(det=>{\n      if(det.location===loc) {\n        setDisplayDetails(det)\n      }\n    })\n  }\n\n  const OnChangeSetSurpriseVisit = e => {\n    const state = (e.target.checked?true:false);\n    setSurpriseVisit(state)\n  } \n\n  const OnChangeSetDOV = e => {\n    setDOV(e)\n    console.log(e)\n  }\n\n  const onClickSetVisit = () => {\n    setVisit(true)\n  }\n\n  const handleClick = (event) => {\n    setAnchorEl(anchorEl ? null : event.currentTarget);\n  }\n\n  const onSubmit = () => {\n    setMailSent(true)\n  }\n\n  const formatDate = (date) => {\n    const newDate=dayjs(date.toJSON())\n    return dayjs(newDate).format('DD-MMM-YYYY , HH:mm')\n  }\n\n    return (\n      <div>\n      <div className='row'></div>\n      <div className='row py-5'>\n      {\n        props.loggedIn ? (\n          <div> {\n            stores ? (\n            <div class=\"wrapper\">\n            <div className='row py-5'>\n              <div className='col-2'></div>  \n              <div className='col-1'><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-caret-left-fill\" viewBox=\"0 0 16 16\" onClick={prevStore}>\n                  <path d=\"m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z\"/>\n                </svg>\n              </div>\n              <div className='col-6'>\n                <div className='text-centre'>\n                  {\n                  revenue.length>0 && displayDetails!=null?                \n                    (<div>\n                      <h1>{stores[currStore]}</h1>\n\n                      <div className='row'>\n                        <div className=\"col-lg-6 pb-4 py-5\">\n                          <div className=\"card bg-dark text-white\">\n                            <div className=\"card-body p-4 text-centre\">\n                              <div class=\"mb-md-4 mt-md-4 pb-4\">\n                                <h2 class=\"fw-bold mb-2 text-uppercase\">STATS</h2>\n                                <div class=\"form-outline form-white mb-8 text-left-align medium-font\">\n                                    <p>\n                                      <strong>Revenue : $</strong>{' '+priceFormatter(parseInt(revenue[currStore]))+'\\n'}<br/>\n                                      <strong>In staff : </strong>{' '+parseInt(displayDetails.numStaff)+'\\n'}<br/>\n                                      <strong>ROTE ($/staff) :</strong> {' '+priceFormatter(parseInt(rote))+'\\n'}<br/>\n                                      <strong>Sales/area($/sqft) :</strong>{' '+priceFormatter(parseInt(spa))+'\\n'}<br/>\n                                    </p>\n                                </div>\n                              </div>\n                            </div>            \n                          </div>\n                        </div>\n                        <div className=\"col-lg-6 pb-4 py-5\">\n                          <div className=\"card bg-dark text-white\">\n                            <div className=\"card-body p-4 text-centre\">\n                              <div class=\"mb-md-4 mt-md-4 pb-4\">\n                                <h2 class=\"fw-bold mb-2 text-uppercase\">MANAGER</h2>\n                                <div class=\"form-outline form-white mb-6 text-left-align medium-font\">\n                                    <p>\n                                    <strong>Name : </strong>{' '+(displayDetails.manager.name)+'\\n'} <br/>\n                                    <strong>Age : </strong>{' '+(displayDetails.manager.age)+'\\n'} <br/>\n                                    <strong>Contact No. : </strong>{' '+(displayDetails.manager.mobile)+'\\n'} <br/>\n                                    <strong>Cadre : </strong>{' '+(displayDetails.manager.cadre)+'\\n'} <br/>\n                                    </p>\n                                </div>\n                              </div>\n                            </div>            \n                          </div>\n                        </div>\n                      </div>\n                      <div className='input-group'>\n                      <label  for='btn'>Do you want to stop by this store anytime this week ?</label>\n                      <button type=\"button\" id='btn' class=\"btn btn-outline-dark inline\" onClick={onClickSetVisit}>Yes</button>  \n                      </div>\n                      <div>\n                      {\n                      visit? (\n                        <div className='text-left-align'>\n                            <div className='input-group'>\n                              <label>Do you want to make it an uninformed visit ?</label>\n                              <input type=\"checkbox\" id='chekky' class=\"regular-checkbox big-checkbox\" onChange={OnChangeSetSurpriseVisit} />\n                              <div className='col-1'></div>\n                              <button aria-describedby={id} className=\"btn btn-outline-dark button-right-align\" for='chekky' onClick={handleClick}>\n                                  To know more\n                                </button>\n                                <Popper id={id} open={open} anchorEl={anchorEl}>\n                                  <Box sx={{ border: 1, p: 1, bgcolor: 'black' , color: 'whitesmoke' }}>\n                                    In case of an informed visit (default), the manager of the store will be alerted by mail about your visit. If this box for surprise visit is checked, the mail to the manager will not be generated \n                                  </Box>\n                                </Popper>\n                              </div>\n                            <div className='input-group'> \n                              <label for='dov'>Select a day this week</label>                        \n                              <DatePicker\n                              id='dov'\n                                onChange={OnChangeSetDOV}\n                                selected={DOV}\n                                startDate={minDate}\n                                endDate={maxDate}\n                                showTimeSelect\n                                className='input'\n                              /> \n                              <button className=\"btn btn-outline-dark button-right-align\" onClick={onSubmit}>\n                                Confirm\n                              </button>\n                            </div>\n                            <div>\n                            {\n                            mailSent ? (\n                              <div> \n                                <div className='bold-green-font'>\n                                Your next visit to {stores[currStore]} will be on {formatDate(DOV)}\n                                </div>\n                                {\n                                  surpriseVisit?null:\n                                    <div className='bold-green-font'>\n                                      System generated mail sent to the store manager\n                                    </div>\n                                }\n                              </div>\n                            ):null\n                            }\n                          </div>\n                        </div>\n                    ):null\n                  }\n                      </div>\n                  </div>):null}\n                  </div>\n              </div>\n              <div className='col'><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-caret-right-fill\" viewBox=\"0 0 16 16\" onClick={nextStore}>\n                  <path d=\"m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\"/>\n                </svg>\n              </div>\n            </div>\n          </div>\n          ):\n          (<div>Not yet Loaded</div>)    \n        }</div>    \n       ) :\n       (\n       <div class=\"jumbotron jumbotron-fluid\">\n         <div class=\"container\">\n           <h1 class=\"display-4\">Log In to continue</h1>\n           <p class=\"lead\">Head on to <Link to='/supply'>Login Page</Link></p>\n         </div>\n       </div>\n       )\n      }\n      </div>\n      </div>\n    \n      );\n}\n\nexport default ManagementTools;","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/graphs/graph3.component.js",["84","85","86"],"import React, { useEffect , useState} from 'react';\nimport SalesDataService from '../../services/sales.js' ;\nimport dayjs from 'dayjs' ;\nimport { Chart } from \"react-google-charts\";\n\n\nconst Graph3 = props => {\n\n  const [sales, setSales] = React.useState([])\n  const [month, setMonth] = React.useState(\"\")\n  const [store, setStore] = React.useState(\"\")\n  const [dataForLineChart, setdataForLineChart] = React.useState(null)\n  const [locations, setLocations] = React.useState([])\n  const months = ['Jan', 'Feb','March','April','May','June','July','Aug','Sept','Oct','Nov','Dec'] \n  const [noData, setNoData] = useState(null)\n  const [monthToDisplay, setMonthToDisplay]=useState('Jan')\n  const [storeToDisplay, setStoreToDisplay]=useState('Austin')\n\n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n  \n  const calculateTotalRevenue = (items) => {\n    // console.log(items) ;\n    var totalRevenue = 0.0\n    items.map(item => {\n      totalRevenue+=(parseInt(item.quantity)*item.price['$numberDecimal']) \n    })\n    return totalRevenue\n  }\n\n  const DisplayLineChart = () => {      \n    // choose a month -> display line chart from that month      \n    SalesDataService.getUnlimited(store, \"location\")\n    .then(response => {        \n        setSales(response.data.Sales)\n    })\n    .catch(e => {\n        console.log(e);\n    })\n\n    var m = [[\"Date\",\"Revenue\"]]\n    var monthlySaleExists = false \n    sales.map((sale)=>{\n      const date = dayjs(sale.saleDate).month()\n      if(date === month) {\n        monthlySaleExists = true ;\n        const d = dayjs(sale.saleDate).date()\n        const monthlyRevenue = calculateTotalRevenue(sale.items) \n        \n        var flag = 0\n        for(var i=0;i<m.length;i++) {\n          if(m[i][0] === d) {\n            m[i][1]+=monthlyRevenue\n            flag = 1\n            break\n          }\n        }\n        if(!flag) {\n          m.push([d,monthlyRevenue])\n        }\n      }\n    })\n    if(!monthlySaleExists)\n      setdataForLineChart(null)\n    else {\n      m.sort((a,b)=>a[0]-b[0])\n      setdataForLineChart(m)\n    }\n\n    setStoreToDisplay(store)\n    setMonthToDisplay(month)\n\n  }\n\n  const retrieveLocations = () => {\n      SalesDataService.getStoreLocations()\n      .then(response => {\n      // console.log(response.data);\n      setLocations(response.data);\n      })\n      .catch(e => {\n      console.log(e);\n      });\n  }\n  // triggered setters\n  const OnChangeSetStore = e => {\n      setStore(e.target.value)\n  }\n\n  const OnChangeSetMonth = e => {\n    console.log(e.target.value)\n    for(var i=0;i<12;i++){\n      if(months[i] === e.target.value) {\n        setMonth(i) \n        return  \n      }\n    }\n    return \n  }\n\n    return (\n        <div className='wrapper'>\n            <div className=\"input-group mb-3 container\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text bg-dark\" id=\"basic-addon1\"><div className='text-white'>Store Location</div></span>\n                    </div>\n                    <select class=\"form-control selectinput\" type='select' onChange={OnChangeSetStore}>\n                    {\n                        locations.map(method => {\n                            return (\n                            <option value={method}> {method} </option>\n                            )\n                        })\n                    }\n                    </select>\n            </div>\n            <div className=\"input-group mb-3 container\">\n                <div class=\"input-group-prepend\">\n                    <span class=\"input-group-text bg-dark\" id=\"basic-addon4\"><div className='text-white'>Month</div></span>\n                </div>\n\n                <select class=\"form-control selectinput\" type='select' onChange={OnChangeSetMonth}>\n                    {\n                    months.map(method => {\n                        return (\n                        <option value={method}> {method} </option>\n                        )\n                    })\n                    }\n                </select>\n\n                <div className=\"input-group-append\">\n                    <button\n                    className=\"btn btn-outline-dark\"\n                    type=\"button\"\n                    onClick={DisplayLineChart}\n                    >\n                    Analyze\n                    </button>\n                </div>\n            </div>\n            <div className='row py-4'></div>\n            <div className='container'>\n            {\n            dataForLineChart!=null ?(\n              <div>\n              <div class=\"jumbotron jumbotron-fluid\">\n              <div class=\"container\">\n                  <h1 class=\"display-6\">3. Monthly Revenue Chart for A store</h1> </div></div>  \n                  <Chart\n                  chartType=\"LineChart\"\n                  width=\"100%\"\n                  height=\"400px\"\n                  data={dataForLineChart}\n                  options={{\n                      title: `Revenue in ${storeToDisplay} in the month of ${months[monthToDisplay]}`,\n                      legend: { position: \"bottom\" },\n                      hAxis: {format: '0',\n                              viewWindow: {\n                                min: 0,\n                                max: 31\n                              }\n                            }\n                  }}\n                  /> \n              </div>\n            ):\n             noData ? (\n              <div class=\"jumbotron jumbotron-fluid\">\n              <div class=\"container\">\n                  <h1 class=\"display-6\">3. Monthly Revenue Chart for A store</h1>\n                  <p class=\"lead text-italics\">Select a Store and a Month</p>\n              </div>\n              </div> \n              ) : (\n                <div class=\"jumbotron jumbotron-fluid\">\n                <div class=\"container\">\n                    <h1 class=\"display-6\">3. Monthly Revenue Chart for A store</h1>\n                    <p class=\"lead text-italics\">No data found :(</p>\n                </div>\n                </div> \n              )\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default Graph3","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/graphs/graph1.component.js",["87","88","89","90","91","92"],"import React, { useEffect , useState } from 'react';\nimport SalesDataService from '../../services/sales.js' ;\nimport dayjs from 'dayjs' ;\nimport { Chart } from \"react-google-charts\";\nimport {Link,Routes,Route} from 'react-router-dom';\n\nconst Graph1 = props => {\n\n  const [sales, setSales] = React.useState([])\n  const [dataForPiePlot, setdataForPiePlot] = useState(null)\n  const [store, setStore] = useState('Austin')\n  const [locations, setLocations] = React.useState([])\n  const [noData, setNoData] = React.useState(false)\n  const [storeToDisplay, setStoreToDisplay] = useState('Austin')\n\n    useEffect(() => {\n      retrieveLocations();\n    }, []);\n    \n    const retrieveLocations = () => {\n        SalesDataService.getStoreLocations()\n        .then(response => {\n        // console.log(response.data);\n        setLocations(response.data);\n        })\n        .catch(e => {\n        console.log(e);\n        });\n    }\n\n    const calculateQuantityItems = () => {\n               \n        var items = {}\n        \n        sales.map(element => {\n\n            element.items.map(item => {\n              \n              items[item.name]=(items[item.name] ? items[item.name]+parseInt(item.quantity) : parseInt(item.quantity))\n\n            })\n        });\n\n        var ratios = [['Category','Quantity sold']]\n        var objectKeysArray = Object.keys(items)\n        objectKeysArray.forEach((objKey) => {\n            var objValue = items[objKey]\n            // objVal holds quantity of each item\n            var ration = [objKey, objValue]\n            ratios.push(ration)\n        })\n        \n        return ratios\n    }\n\n    const DisplayPieChart = () => {\n        SalesDataService.find(store, \"location\")\n        .then(response => {       \n            setSales(response.data.Sales) \n            setNoData(false);     \n        })\n        .catch(e => {\n            setNoData(true);\n            console.log(e);\n        })\n        const series = calculateQuantityItems()\n        setdataForPiePlot(series)\n        setStoreToDisplay(store)             \n    }\n\n    const OnChangeSetStore = e => {\n        setStore(e.target.value)\n    }\n\n    return (\n        <div className='wrapper'>\n            <div className=\"input-group container\">\n            {/* <label class=\"input-group-prepend black-border centre col-1\" for=\"formWhite2\">Location</label> */}\n            <select class=\"form-control selectinput centre\" type='select'  onChange={OnChangeSetStore}>\n                {\n                  locations.map(method => {\n                    return (\n                      <option value={method}> {method} </option>\n                    )\n                  })\n                }\n              </select>\n              <button className=\"input-group-addon btn btn-outline-dark\" onClick={DisplayPieChart}>Analyse</button>          \n          </div>\n        <div className='row py-4'></div>\n        <div>\n        {\n          dataForPiePlot?(\n          <div className='container'>\n              <div class=\"jumbotron jumbotron-fluid\">\n              <div class=\"container\">\n                <h1 class=\"display-6\">Sales % Of Items in {storeToDisplay}</h1>\n              </div>\n            </div>\n            <Chart\n              className='centre-chart'\n                width={'800px'}\n                height={'600px'}\n                chartType=\"PieChart\"\n                loader={<div>Loading Chart</div>}\n                data={dataForPiePlot}\n                options={{\n                  title: `Percentage of items Sold in ${storeToDisplay}`,\n                  pieSliceText: \"label\"\n                }}\n              />\n            </div> ) : (\n            noData? <div>No Data yet</div> :\n            <div class=\"jumbotron jumbotron-fluid centre-text\">\n              <div class=\"container\">\n                <h1 class=\"display-6\">Sales % Of Items in A store</h1>\n                <p class=\"lead text-italics\">Select a store</p>\n              </div>\n            </div>\n            )\n        }\n        </div>\n      </div>\n    )\n}\n\nexport default Graph1","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/components/graphs/graph2.component.js",["93","94","95","96","97","98","99"],"import React, { useEffect, useState } from 'react';\nimport SalesDataService from '../../services/sales.js' ;\nimport dayjs from 'dayjs' ;\nimport { Chart } from \"react-google-charts\";\nimport {Link,Routes,Route} from 'react-router-dom';\n\nconst Graph2 = props => {\n\n  const [sales, setSales] = React.useState([])\n  const [dataForAnnualPie, setDataForAnnualPie] = useState(null)\n  const [queryYear, setQueryYear] = useState(null)\n  const [yearToDisplay, setYearToDisplay] = useState(null)\n   \n  const calculateTotalRevenue = (items) => {\n    // console.log(items) ;\n    var totalRevenue = 0.0\n    items.map(item => {\n      totalRevenue+=(parseInt(item.quantity)*item.price['$numberDecimal']) \n    })\n    return totalRevenue\n  }\n\n  const DisplayPieForRevenueChart = () => {\n    // as pie chart comparing all stores\n    SalesDataService.getUnlimited()\n    .then(response => {       \n        setSales(response.data.Sales)\n    })\n    .catch(e => {\n        console.log(e);\n    })\n\n    var m = [[\"Store\",\"Annual Revenue\"]]\n    \n    sales.map((sale)=>{\n      const year = dayjs(sale.saleDate).year()\n      if(year == queryYear) {\n        const annualRevenue = calculateTotalRevenue(sale.items) \n        \n        var flag = 0\n        for(var i=1;i<m.length;i++) {\n          if(m[i][0] === sale.storeLocation) {\n            m[i][1]+=annualRevenue\n            flag = 1\n            break\n          }\n        }\n        if(!flag) {\n          m.push([sale.storeLocation, annualRevenue])\n        }\n      }\n    })\n\n    setDataForAnnualPie(m)\n    setYearToDisplay(queryYear)\n  }\n\n  const OnChangeSetYear = e => {\n    setQueryYear(e.target.value)\n  }\n\n    return (\n      <div className='wrapper'>\n        <div className=\"input-group mb-3 container\">\n                      <div class=\"input-group-prepend\">\n                          <span class=\"input-group-text bg-dark\" id=\"basic-addon3\"><div className='text-white'>Year</div></span>\n                      </div>\n\n                      <input class=\"form-control numerical-input\" type=\"number\" min=\"2013\" max=\"2017\" onChange={OnChangeSetYear} >\n                      </input>\n\n                      <div className=\"input-group-append\">\n                          <button\n                          className=\"btn btn-outline-dark\"\n                          type=\"button\"\n                          onClick={DisplayPieForRevenueChart}\n                          >\n                          Analyze\n                          </button>\n                      </div>\n        </div>\n        <div className='container'>\n          {\n            dataForAnnualPie?(<div>\n              <div class=\"jumbotron jumbotron-fluid\">\n              <div class=\"container\">\n                <h1 class=\"display-6\">2. Comparison of Annual Sales in stores in {yearToDisplay}</h1>\n              </div></div>\n              <Chart\n              width={'800px'}\n              height={'600px'}\n              chartType=\"PieChart\"\n              loader={<div>Loading Chart</div>}\n              data={dataForAnnualPie}\n              options={{\n                title: `% Revenue per outlet in the year ${yearToDisplay}`,\n                // chartArea: { left: 15, top: 15, right: 0, bottom: 0 },\n                pieSliceText: \"label\",\n              }}\n              />\n            </div>) :\n            <div class=\"jumbotron jumbotron-fluid\">\n              <div class=\"container\">\n                <h1 class=\"display-6\">2. Comparison of Annual Sales in stores</h1>\n                <p class=\"lead text-italics\">Select a year</p>\n              </div>\n            </div>\n          }\n        </div>\n      </div>\n        \n    )\n}\n\nexport default Graph2","/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/services/sales.js",[],"/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/services/priceFormatter.js",[],"/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/services/stores.js",[],"/home/aarthi/fitgit/react/einstop-sales-management-system/frontend/src/http-common.js",[],{"ruleId":"100","severity":1,"message":"101","line":40,"column":23,"nodeType":"102","endLine":40,"endColumn":48},{"ruleId":"100","severity":1,"message":"101","line":51,"column":25,"nodeType":"102","endLine":51,"endColumn":50},{"ruleId":"100","severity":1,"message":"101","line":62,"column":25,"nodeType":"102","endLine":62,"endColumn":50},{"ruleId":"100","severity":1,"message":"101","line":74,"column":19,"nodeType":"102","endLine":74,"endColumn":87},{"ruleId":"100","severity":1,"message":"101","line":82,"column":21,"nodeType":"102","endLine":82,"endColumn":45},{"ruleId":"103","severity":1,"message":"104","line":20,"column":10,"nodeType":"105","messageId":"106","endLine":20,"endColumn":15},{"ruleId":"103","severity":1,"message":"107","line":20,"column":17,"nodeType":"105","messageId":"106","endLine":20,"endColumn":29},{"ruleId":"103","severity":1,"message":"108","line":28,"column":19,"nodeType":"105","messageId":"106","endLine":28,"endColumn":29},{"ruleId":"103","severity":1,"message":"109","line":29,"column":19,"nodeType":"105","messageId":"106","endLine":29,"endColumn":29},{"ruleId":"103","severity":1,"message":"110","line":30,"column":10,"nodeType":"105","messageId":"106","endLine":30,"endColumn":17},{"ruleId":"103","severity":1,"message":"111","line":30,"column":19,"nodeType":"105","messageId":"106","endLine":30,"endColumn":29},{"ruleId":"103","severity":1,"message":"112","line":96,"column":9,"nodeType":"105","messageId":"106","endLine":96,"endColumn":20},{"ruleId":"103","severity":1,"message":"113","line":101,"column":9,"nodeType":"105","messageId":"106","endLine":101,"endColumn":13},{"ruleId":"114","severity":1,"message":"115","line":120,"column":20,"nodeType":"116","messageId":"117","endLine":120,"endColumn":22},{"ruleId":"114","severity":1,"message":"115","line":130,"column":28,"nodeType":"116","messageId":"117","endLine":130,"endColumn":30},{"ruleId":"118","severity":1,"message":"119","line":148,"column":33,"nodeType":"105","messageId":"120","endLine":148,"endColumn":46},{"ruleId":"118","severity":1,"message":"121","line":149,"column":39,"nodeType":"105","messageId":"120","endLine":149,"endColumn":58},{"ruleId":"103","severity":1,"message":"122","line":2,"column":14,"nodeType":"105","messageId":"106","endLine":2,"endColumn":20},{"ruleId":"103","severity":1,"message":"123","line":2,"column":21,"nodeType":"105","messageId":"106","endLine":2,"endColumn":26},{"ruleId":"103","severity":1,"message":"124","line":19,"column":12,"nodeType":"105","messageId":"106","endLine":19,"endColumn":17},{"ruleId":"103","severity":1,"message":"125","line":19,"column":19,"nodeType":"105","messageId":"106","endLine":19,"endColumn":27},{"ruleId":"103","severity":1,"message":"108","line":24,"column":21,"nodeType":"105","messageId":"106","endLine":24,"endColumn":31},{"ruleId":"103","severity":1,"message":"109","line":25,"column":21,"nodeType":"105","messageId":"106","endLine":25,"endColumn":31},{"ruleId":"126","severity":1,"message":"127","line":37,"column":6,"nodeType":"128","endLine":37,"endColumn":13,"suggestions":"129"},{"ruleId":"103","severity":1,"message":"130","line":15,"column":18,"nodeType":"105","messageId":"106","endLine":15,"endColumn":27},{"ruleId":"114","severity":1,"message":"115","line":26,"column":20,"nodeType":"116","messageId":"117","endLine":26,"endColumn":22},{"ruleId":"114","severity":1,"message":"115","line":44,"column":21,"nodeType":"116","messageId":"117","endLine":44,"endColumn":23},{"ruleId":"103","severity":1,"message":"131","line":3,"column":8,"nodeType":"105","messageId":"106","endLine":3,"endColumn":13},{"ruleId":"103","severity":1,"message":"132","line":5,"column":9,"nodeType":"105","messageId":"106","endLine":5,"endColumn":13},{"ruleId":"103","severity":1,"message":"122","line":5,"column":14,"nodeType":"105","messageId":"106","endLine":5,"endColumn":20},{"ruleId":"103","severity":1,"message":"123","line":5,"column":21,"nodeType":"105","messageId":"106","endLine":5,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":35,"column":27,"nodeType":"116","messageId":"117","endLine":35,"endColumn":29},{"ruleId":"114","severity":1,"message":"115","line":37,"column":36,"nodeType":"116","messageId":"117","endLine":37,"endColumn":38},{"ruleId":"103","severity":1,"message":"133","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"132","line":5,"column":9,"nodeType":"105","messageId":"106","endLine":5,"endColumn":13},{"ruleId":"103","severity":1,"message":"122","line":5,"column":14,"nodeType":"105","messageId":"106","endLine":5,"endColumn":20},{"ruleId":"103","severity":1,"message":"123","line":5,"column":21,"nodeType":"105","messageId":"106","endLine":5,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":17,"column":20,"nodeType":"116","messageId":"117","endLine":17,"endColumn":22},{"ruleId":"114","severity":1,"message":"115","line":35,"column":21,"nodeType":"116","messageId":"117","endLine":35,"endColumn":23},{"ruleId":"134","severity":1,"message":"135","line":37,"column":15,"nodeType":"136","messageId":"137","endLine":37,"endColumn":17},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'pages' is assigned a value but never used.","Identifier","unusedVar","'setQueryPage' is assigned a value but never used.","'setMinDate' is assigned a value but never used.","'setMaxDate' is assigned a value but never used.","'trigger' is assigned a value but never used.","'setTrigger' is assigned a value but never used.","'refreshList' is assigned a value but never used.","'find' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-const-assign","'queryLocation' is constant.","const","'queryPurchaseMethod' is constant.","'Routes' is defined but never used.","'Route' is defined but never used.","'ranks' is assigned a value but never used.","'setRanks' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'retrieveLocations' and 'retrieveSales'. Either include them or remove the dependency array.","ArrayExpression",["138"],"'setNoData' is assigned a value but never used.","'dayjs' is defined but never used.","'Link' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"139","fix":"140"},"Update the dependencies array to be: [retrieveLocations, retrieveSales, saved]",{"range":"141","text":"142"},[1513,1520],"[retrieveLocations, retrieveSales, saved]"]