{"ast":null,"code":"var _jsxFileName = \"/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/analyze.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport SalesDataService from '../services/sales.js';\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnalyzeSales = props => {\n  _s();\n\n  // G1 : revenue from each all stores -> min & max = one graph has all stores\n  // G2 : percentage of different items sold from a given store\n  const [store, setStore] = React.useState(\"\");\n  const [locations, setLocations] = React.useState([]);\n  const [dataToPlot, setdataToPlot] = React.useState();\n  const [sales, setSales] = React.useState([]);\n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n\n  const retrieveLocations = () => {\n    SalesDataService.getStoreLocations().then(response => {\n      // console.log(response.data);\n      setLocations(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const OnChangeSetStore = e => {\n    setStore(e.target.value);\n  };\n\n  const calculateRatioItems = () => {\n    var items = {}; // {'pencil':3, 'eraser':10}\n\n    var totalNumber = 0; // 13\n\n    sales.map(element => {\n      element.items.map(item => {\n        items[item.name] = items[item.name] ? items[item.name] + parseInt(item.quantity) : parseInt(item.quantity);\n        totalNumber += parseInt(item.quantity);\n      });\n    });\n    var ratios = [['Category', 'Quantity sold']];\n    var objectKeysArray = Object.keys(items);\n    objectKeysArray.forEach(objKey => {\n      var objValue = items[objKey]; // objVal holds quantity of each item\n\n      var ration = [objKey, objValue];\n      ratios.push(ration);\n    });\n    return ratios;\n  };\n\n  const DisplayPieChart = e => {\n    SalesDataService.find(store, \"location\").then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    const series = calculateRatioItems();\n    setdataToPlot(series);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"input-group-prepend\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"input-group-text\",\n            id: \"basic-addon3\",\n            children: \"@\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          class: \"form-control\",\n          onChange: OnChangeSetStore,\n          children: locations.map(method => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: method,\n              children: [\" \", method, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group-append\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-outline-secondary\",\n            type: \"button\",\n            onClick: DisplayPieChart,\n            children: \"Analyze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: {\n        dataToPlot\n      } ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          width: '800px',\n          height: '600px',\n          chartType: \"PieChart\",\n          loader: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 31\n          }, this),\n          data: dataToPlot,\n          options: {\n            title: 'Items and Sales'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"'Nothing to Dsiplay'\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AnalyzeSales, \"aArEwnn78V9dyVfcFbZQSDiMLfI=\");\n\n_c = AnalyzeSales;\nexport default AnalyzeSales;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnalyzeSales\");","map":{"version":3,"sources":["/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/analyze.js"],"names":["React","useEffect","SalesDataService","Chart","AnalyzeSales","props","store","setStore","useState","locations","setLocations","dataToPlot","setdataToPlot","sales","setSales","retrieveLocations","getStoreLocations","then","response","data","catch","e","console","log","OnChangeSetStore","target","value","calculateRatioItems","items","totalNumber","map","element","item","name","parseInt","quantity","ratios","objectKeysArray","Object","keys","forEach","objKey","objValue","ration","push","DisplayPieChart","find","Sales","series","method","title"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport SalesDataService from '../services/sales.js' ;\n\nimport { Chart } from \"react-google-charts\";\n\nconst AnalyzeSales = (props) => {\n    // G1 : revenue from each all stores -> min & max = one graph has all stores\n\n    // G2 : percentage of different items sold from a given store\n     \n    const [store, setStore] = React.useState(\"\")\n    const [locations, setLocations] = React.useState([])\n    const [dataToPlot, setdataToPlot] = React.useState()\n    const [sales, setSales] = React.useState([])\n    \n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n\n    const retrieveLocations = () => {\n        SalesDataService.getStoreLocations()\n        .then(response => {\n        // console.log(response.data);\n        setLocations(response.data);\n        })\n        .catch(e => {\n        console.log(e);\n        });\n    }\n\n    const OnChangeSetStore = e => {\n        setStore(e.target.value)\n    }\n\n      const calculateRatioItems = () => {\n               \n        var items = {}\n        // {'pencil':3, 'eraser':10}\n        var totalNumber = 0\n        // 13\n\n        sales.map(element => {\n\n            element.items.map(item => {\n              \n              items[item.name]=(items[item.name] ? items[item.name]+parseInt(item.quantity) : parseInt(item.quantity)) \n\n              totalNumber+=parseInt(item.quantity)\n            })\n\n        });\n\n        var ratios = [['Category','Quantity sold']]\n\n        var objectKeysArray = Object.keys(items)\n\n        objectKeysArray.forEach((objKey) => {\n            var objValue = items[objKey]\n            // objVal holds quantity of each item\n            var ration = [objKey, objValue]\n\n            ratios.push(ration)\n        })\n        \n        return ratios\n    }\n    \n      const DisplayPieChart = (e) => {\n        SalesDataService.find(store, \"location\")\n                .then(response => {\n                  \n                    setSales(response.data.Sales)\n                })\n                .catch(e => {\n                    console.log(e);\n                })\n        \n        const series = calculateRatioItems()\n\n        setdataToPlot(series)\n\n    }\n\n      return (\n        <div>\n            <div className=\"row form\">            \n                <div className=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">@</span>\n                    </div>\n\n                    <select class=\"form-control\" onChange={OnChangeSetStore}>\n                        {\n                        locations.map(method => {\n                            return (\n                            <option value={method}> {method} </option>\n                            )\n                        })\n                        }\n                    </select>\n\n                    <div className=\"input-group-append\">\n                        <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={DisplayPieChart}\n                        >\n                        Analyze\n                        </button>\n                    </div>\n                </div>\n            </div>\n          <div>\n            {\n                  {dataToPlot} ? \n                    <div><Chart\n                      width={'800px'}\n                      height={'600px'}\n                      chartType=\"PieChart\"\n                      loader={<div>Loading Chart</div>}\n                      data={dataToPlot}\n                      options={{\n                        title: 'Items and Sales',\n                      }}\n                    /></div>\n                  :\n                  <div>'Nothing to Dsiplay'</div>\n            }\n          </div>\n         </div> \n      \n      );\n\n}\n\nexport default AnalyzeSales;\n"]},"metadata":{},"sourceType":"module"}