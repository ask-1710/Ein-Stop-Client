{"ast":null,"code":"var _jsxFileName = \"/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/analyze.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport SalesDataService from '../services/sales.js';\nimport dayjs from 'dayjs';\nimport { Chart } from \"react-google-charts\";\nimport Login from './login.js';\nimport { Link, Routes, Route } from 'react-router-dom';\nimport Graph1 from './graphs/graph1.component.js';\nimport Graph2 from './graphs/graph2.component.js';\nimport Graph3 from './graphs/graph3.component.js'; // import Graph4 from './graphs/graph4.component.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnalyzeSales = props => {\n  _s();\n\n  // G1 : revenue from each all stores -> min & max = one graph has all stores \n  // G2 : percentage of different items sold from a given store - DONE\n  const [store, setStore] = React.useState(\"\");\n  const [locations, setLocations] = React.useState([]);\n  const [dataForPiePlot, setdataForPiePlot] = React.useState(null);\n  const [dataForLineChart, setdataForLineChart] = React.useState(null);\n  const [dataForBarChart, setdataForBarChart] = React.useState(null);\n  const [sales, setSales] = React.useState([]);\n  const [month, setMonth] = React.useState(\"\");\n  const months = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const [queryItem, setItem] = React.useState('');\n  const [queryYear, setQueryYear] = React.useState();\n  const [dataForAnnualPie, setDataForAnnualPie] = React.useState(null);\n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n\n  const retrieveLocations = () => {\n    SalesDataService.getStoreLocations().then(response => {\n      // console.log(response.data);\n      setLocations(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  }; // triggered setters\n\n\n  const OnChangeSetStore = e => {\n    setStore(e.target.value);\n  };\n\n  const OnChangeSetMonth = e => {\n    console.log(e.target.value);\n\n    for (var i = 0; i < 12; i++) {\n      if (months[i] === e.target.value) {\n        setMonth(i);\n        return;\n      }\n    }\n\n    return;\n  };\n\n  const OnChangeSetItem = e => {\n    setItem(e.target.value.toLowerCase());\n  };\n\n  const OnChangeSetYear = e => {\n    setQueryYear(e.target.value);\n  }; // helper functions\n\n\n  const calculateQuantityItems = () => {\n    var items = {}; // {'pencil':3, 'eraser':10}\n    // 13\n\n    sales.map(element => {\n      element.items.map(item => {\n        items[item.name] = items[item.name] ? items[item.name] + parseInt(item.quantity) : parseInt(item.quantity);\n      });\n    });\n    var ratios = [['Category', 'Quantity sold']];\n    var objectKeysArray = Object.keys(items);\n    objectKeysArray.forEach(objKey => {\n      var objValue = items[objKey]; // objVal holds quantity of each item\n\n      var ration = [objKey, objValue];\n      ratios.push(ration);\n    });\n    return ratios;\n  };\n\n  const calculateTotalRevenue = items => {\n    // console.log(items) ;\n    var totalRevenue = 0.0;\n    items.map(item => {\n      totalRevenue += parseInt(item.quantity) * item.price['$numberDecimal'];\n    });\n    return totalRevenue;\n  }; // display graphs\n\n\n  const DisplayPieChart = () => {\n    SalesDataService.find(store, \"location\").then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    const series = calculateQuantityItems();\n    setdataForPiePlot(series);\n  };\n\n  const DisplayLineChart = () => {\n    // choose a month -> display line chart from that month      \n    SalesDataService.getUnlimited(store, \"location\").then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    var m = [[\"Date\", \"Revenue\"]];\n    var monthlySaleExists = false;\n    sales.map(sale => {\n      const date = dayjs(sale.saleDate).month();\n\n      if (date === month) {\n        monthlySaleExists = true;\n        const d = dayjs(sale.saleDate).date();\n        const monthlyRevenue = calculateTotalRevenue(sale.items);\n        var flag = 0;\n\n        for (var i = 0; i < m.length; i++) {\n          if (m[i][0] === d) {\n            m[i][1] += monthlyRevenue;\n            flag = 1;\n            break;\n          }\n        }\n\n        if (!flag) {\n          m.push([d, monthlyRevenue]);\n        }\n      }\n    });\n    if (!monthlySaleExists) setdataForLineChart(null);else {\n      m.sort((a, b) => a[0] - b[0]);\n      setdataForLineChart(m);\n    }\n  };\n\n  const DisplayPieForRevenueChart = () => {\n    // as pie chart comparing all stores\n    SalesDataService.getUnlimited().then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    var m = [[\"Store\", \"Annual Revenue\"]];\n    sales.map(sale => {\n      const year = dayjs(sale.saleDate).year();\n\n      if (year == queryYear) {\n        const annualRevenue = calculateTotalRevenue(sale.items);\n        var flag = 0;\n\n        for (var i = 1; i < m.length; i++) {\n          if (m[i][0] === sale.storeLocation) {\n            m[i][1] += annualRevenue;\n            flag = 1;\n            break;\n          }\n        }\n\n        if (!flag) {\n          m.push([sale.storeLocation, annualRevenue]);\n        }\n      }\n    });\n    setDataForAnnualPie(m);\n  };\n\n  const DisplayBarChart = () => {\n    // comparison of sales of the given item in all outlets\n    // ACTIONS : increase the cost of the item in that branch , increase supply of the item and relevant ones to tht branch\n    SalesDataService.getAll().then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    var quant = {};\n    var itemSold = false;\n    sales.map(sale => {\n      sale.items.map(item => {\n        if (item.name === queryItem) {\n          itemSold = true;\n          quant[sale.storeLocation] = quant[sale.storeLocation] ? quant[sale.storeLocation] + parseInt(item.quantity) : parseInt(item.quantity);\n        }\n      });\n    });\n\n    if (!itemSold) {\n      setdataForBarChart(null);\n      return;\n    }\n\n    var data = [['Store', 'Quantity']];\n    var objectKeysArray = Object.keys(quant);\n    objectKeysArray.forEach(objKey => {\n      var objValue = quant[objKey];\n      console.log(objKey, objValue); // objVal holds  of each item\n\n      var q = [objKey, objValue];\n      data.push(q);\n    });\n    setdataForBarChart(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"props.loggedIn ? (\", /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"col\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card card-height\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body card-bg-dark \",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"card-title card-bg-dark\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"italic-orange-font bold-font\",\n              children: \"GRAPHS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 59\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text card-bg-dark\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analyze/graph1\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"italic-orange-font bold-font\",\n                children: \"1. Sales % Of Items in A store\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analyze/graph2\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"italic-orange-font bold-font\",\n                children: \"2. Comparison of Annual Sales in stores\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/analyze/graph3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"italic-orange-font bold-font\",\n                children: \"3. Monthly Revenue Chart for A store\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 26\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }, this), \") : (\", /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"jumbotron jumbotron-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          class: \"display-4\",\n          children: \"Log In to continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          class: \"lead\",\n          children: [\"Head on to \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/supply\",\n            children: \"Login Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 8\n    }, this), \")\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-3\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/supply\",\n          element: /*#__PURE__*/_jsxDEV(Login, {\n            login: props.login\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analyze/graph1\",\n          element: /*#__PURE__*/_jsxDEV(Graph1, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analyze/graph2\",\n          element: /*#__PURE__*/_jsxDEV(Graph2, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analyze/graph3\",\n          element: /*#__PURE__*/_jsxDEV(Graph3, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AnalyzeSales, \"E0K/SqZ4qplO5+8cxN3xqHEF37w=\");\n\n_c = AnalyzeSales;\nexport default AnalyzeSales;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnalyzeSales\");","map":{"version":3,"sources":["/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/analyze.js"],"names":["React","useEffect","SalesDataService","dayjs","Chart","Login","Link","Routes","Route","Graph1","Graph2","Graph3","AnalyzeSales","props","store","setStore","useState","locations","setLocations","dataForPiePlot","setdataForPiePlot","dataForLineChart","setdataForLineChart","dataForBarChart","setdataForBarChart","sales","setSales","month","setMonth","months","queryItem","setItem","queryYear","setQueryYear","dataForAnnualPie","setDataForAnnualPie","retrieveLocations","getStoreLocations","then","response","data","catch","e","console","log","OnChangeSetStore","target","value","OnChangeSetMonth","i","OnChangeSetItem","toLowerCase","OnChangeSetYear","calculateQuantityItems","items","map","element","item","name","parseInt","quantity","ratios","objectKeysArray","Object","keys","forEach","objKey","objValue","ration","push","calculateTotalRevenue","totalRevenue","price","DisplayPieChart","find","Sales","series","DisplayLineChart","getUnlimited","m","monthlySaleExists","sale","date","saleDate","d","monthlyRevenue","flag","length","sort","a","b","DisplayPieForRevenueChart","year","annualRevenue","storeLocation","DisplayBarChart","getAll","quant","itemSold","q","login"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport SalesDataService from '../services/sales.js' ;\nimport dayjs from 'dayjs' ;\nimport { Chart } from \"react-google-charts\";\nimport Login from './login.js';\nimport {Link,Routes,Route} from 'react-router-dom';\nimport Graph1 from './graphs/graph1.component.js';\nimport Graph2 from './graphs/graph2.component.js';\nimport Graph3 from './graphs/graph3.component.js';\n// import Graph4 from './graphs/graph4.component.js';\n\nconst AnalyzeSales = (props) => {\n    // G1 : revenue from each all stores -> min & max = one graph has all stores \n\n    // G2 : percentage of different items sold from a given store - DONE\n    \n  const [store, setStore] = React.useState(\"\")\n  const [locations, setLocations] = React.useState([])\n  const [dataForPiePlot, setdataForPiePlot] = React.useState(null)\n  const [dataForLineChart, setdataForLineChart] = React.useState(null)\n  const [dataForBarChart, setdataForBarChart] = React.useState(null)\n  const [sales, setSales] = React.useState([])\n  const [month, setMonth] = React.useState(\"\")\n  const months = ['Jan', 'Feb','March','April','May','June','July','August','September','October','November','December'] \n  const [queryItem, setItem] = React.useState('')\n  const [queryYear, setQueryYear] = React.useState()\n  const [dataForAnnualPie, setDataForAnnualPie] = React.useState(null)\n        \n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n\n    const retrieveLocations = () => {\n        SalesDataService.getStoreLocations()\n        .then(response => {\n        // console.log(response.data);\n        setLocations(response.data);\n        })\n        .catch(e => {\n        console.log(e);\n        });\n    }\n    // triggered setters\n    const OnChangeSetStore = e => {\n        setStore(e.target.value)\n    }\n\n    const OnChangeSetMonth = e => {\n      console.log(e.target.value)\n      for(var i=0;i<12;i++){\n        if(months[i] === e.target.value) {\n          setMonth(i) \n          return  \n        }\n      }\n      return \n    }\n\n    const OnChangeSetItem = (e) => {\n      setItem(e.target.value.toLowerCase())\n    }\n    \n    const OnChangeSetYear = e => {\n      setQueryYear(e.target.value)\n    }\n\n    // helper functions\n    const calculateQuantityItems = () => {\n               \n        var items = {}\n        // {'pencil':3, 'eraser':10}\n        // 13\n        sales.map(element => {\n\n            element.items.map(item => {\n              \n              items[item.name]=(items[item.name] ? items[item.name]+parseInt(item.quantity) : parseInt(item.quantity))\n\n            })\n        });\n        var ratios = [['Category','Quantity sold']]\n        var objectKeysArray = Object.keys(items)\n        objectKeysArray.forEach((objKey) => {\n            var objValue = items[objKey]\n            // objVal holds quantity of each item\n            var ration = [objKey, objValue]\n            ratios.push(ration)\n        })\n        \n        return ratios\n    }\n    \n    const calculateTotalRevenue = (items) => {\n      // console.log(items) ;\n      var totalRevenue = 0.0\n      items.map(item => {\n        totalRevenue+=(parseInt(item.quantity)*item.price['$numberDecimal']) \n      })\n      return totalRevenue\n    }\n\n    // display graphs\n    const DisplayPieChart = () => {\n        SalesDataService.find(store, \"location\")\n                .then(response => {       \n                    setSales(response.data.Sales)\n                })\n                .catch(e => {\n                    console.log(e);\n                })\n        \n        const series = calculateQuantityItems()\n\n        setdataForPiePlot(series)\n    }\n\n    const DisplayLineChart = () => {      \n      // choose a month -> display line chart from that month      \n      SalesDataService.getUnlimited(store, \"location\")\n      .then(response => {        \n          setSales(response.data.Sales)\n      })\n      .catch(e => {\n          console.log(e);\n      })\n\n      var m = [[\"Date\",\"Revenue\"]]\n      var monthlySaleExists = false \n      sales.map((sale)=>{\n        const date = dayjs(sale.saleDate).month()\n        if(date === month) {\n          monthlySaleExists = true ;\n          const d = dayjs(sale.saleDate).date()\n          const monthlyRevenue = calculateTotalRevenue(sale.items) \n          \n          var flag = 0\n          for(var i=0;i<m.length;i++) {\n            if(m[i][0] === d) {\n              m[i][1]+=monthlyRevenue\n              flag = 1\n              break\n            }\n          }\n          if(!flag) {\n            m.push([d,monthlyRevenue])\n          }\n        }\n      })\n      if(!monthlySaleExists)\n        setdataForLineChart(null)\n      else {\n        m.sort((a,b)=>a[0]-b[0])\n        setdataForLineChart(m)\n      }\n\n    }\n\n    const DisplayPieForRevenueChart = () => {\n      // as pie chart comparing all stores\n      SalesDataService.getUnlimited()\n      .then(response => {       \n          setSales(response.data.Sales)\n      })\n      .catch(e => {\n          console.log(e);\n      })\n\n      var m = [[\"Store\",\"Annual Revenue\"]]\n      \n      sales.map((sale)=>{\n        const year = dayjs(sale.saleDate).year()\n        if(year == queryYear) {\n          const annualRevenue = calculateTotalRevenue(sale.items) \n          \n          var flag = 0\n          for(var i=1;i<m.length;i++) {\n            if(m[i][0] === sale.storeLocation) {\n              m[i][1]+=annualRevenue\n              flag = 1\n              break\n            }\n          }\n          if(!flag) {\n            m.push([sale.storeLocation, annualRevenue])\n          }\n        }\n      })\n\n      setDataForAnnualPie(m)\n    }\n\n    const DisplayBarChart = () => {\n      // comparison of sales of the given item in all outlets\n      // ACTIONS : increase the cost of the item in that branch , increase supply of the item and relevant ones to tht branch\n\n      SalesDataService.getAll()\n      .then(response => {\n        setSales(response.data.Sales);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n\n        var quant = {}        \n        var itemSold=false\n        sales.map(sale => {\n          sale.items.map(item => {\n            if(item.name === queryItem) {\n              itemSold=true\n              quant[sale.storeLocation] = (quant[sale.storeLocation] ? quant[sale.storeLocation] + parseInt(item.quantity) : parseInt(item.quantity))\n            }\n          })\n        })\n        if(!itemSold){\n          setdataForBarChart(null)\n          return\n        }       \n        var data = [['Store', 'Quantity']]\n\n        var objectKeysArray = Object.keys(quant)\n\n        objectKeysArray.forEach((objKey) => {\n            var objValue = quant[objKey]\n            console.log(objKey, objValue)\n            // objVal holds  of each item\n            var q = [objKey, objValue]\n            data.push(q)            \n        })\n\n        setdataForBarChart(data) \n    }\n\n    return (\n      <div>\n      props.loggedIn ? (\n          <div class=\"col\">\n              <div className=\"card card-height\">\n                <div className=\"card-body card-bg-dark \">\n                  <h5 className=\"card-title card-bg-dark\"><div className='italic-orange-font bold-font'>GRAPHS</div></h5>\n                  <p className=\"card-text card-bg-dark\">\n                  <Link to = '/analyze/graph1'>\n                  <div className='italic-orange-font bold-font'>1. Sales % Of Items in A store</div>\n                  </Link><br/>\n                  <Link to = '/analyze/graph2'>\n                     <div className='italic-orange-font bold-font'>2. Comparison of Annual Sales in stores</div>\n                  </Link><br/>\n                  <Link to = '/analyze/graph3'>\n                   <div className='italic-orange-font bold-font'>3. Monthly Revenue Chart for A store</div>\n                  </Link><br/>\n                  {/* <Link to = '/analyze/graph4'>\n                  4. Comparison of product demand in stores\n                  </Link> */}  \n                  </p>\n                  </div>\n                </div>\n              </div>\n       ) :\n       (\n       <div class=\"jumbotron jumbotron-fluid\">\n         <div class=\"container\">\n           <h1 class=\"display-4\">Log In to continue</h1>\n           <p class=\"lead\">Head on to <Link to='/supply'>Login Page</Link></p>\n         </div>\n       </div>\n       )\n      \n      <div className=\"container mt-3\">\n        <Routes>\n          <Route path=\"/supply\" element={<Login login={props.login}/>}\n          />\n          <Route path='/analyze/graph1' element={<Graph1/>}\n          />\n          <Route path='/analyze/graph2' element={<Graph2 />} \n          />\n          <Route path='/analyze/graph3' element={<Graph3 />}\n          />\n          {/* <Route path='/analyze/graph4' element={<Graph4 dataForBarChart={dataForBarChart}/>}\n          /> */}\n        </Routes>\n      </div>\n      </div>\n    );\n}\n\nexport default AnalyzeSales;"]},"metadata":{},"sourceType":"module"}