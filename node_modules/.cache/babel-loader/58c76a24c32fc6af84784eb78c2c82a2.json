{"ast":null,"code":"var _jsxFileName = \"/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/analyze.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport SalesDataService from '../services/sales.js';\nimport dayjs from 'dayjs';\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnalyzeSales = props => {\n  _s();\n\n  // G1 : revenue from each all stores -> min & max = one graph has all stores \n  // G2 : percentage of different items sold from a given store - DONE\n  const [store, setStore] = React.useState(\"\");\n  const [locations, setLocations] = React.useState([]);\n  const [dataForPiePlot, setdataForPiePlot] = React.useState();\n  const [dataForLineChart, setdataForLineChart] = React.useState();\n  const [sales, setSales] = React.useState([]);\n  const [month, setMonth] = React.useState(\"\");\n  const months = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const [monthlySales, setMontlySales] = React.useState([]);\n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n\n  const retrieveLocations = () => {\n    SalesDataService.getStoreLocations().then(response => {\n      // console.log(response.data);\n      setLocations(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const OnChangeSetStore = e => {\n    setStore(e.target.value);\n  };\n\n  const OnChangeSetMonth = e => {\n    console.log(e.target.value);\n\n    for (var i = 0; i < 12; i++) {\n      if (months[i] === e.target.value) {\n        setMonth(i);\n        return;\n      }\n    }\n\n    return;\n  };\n\n  const calculateQuantityItems = () => {\n    var items = {}; // {'pencil':3, 'eraser':10}\n\n    var totalNumber = 0; // 13\n\n    sales.map(element => {\n      element.items.map(item => {\n        items[item.name] = items[item.name] ? items[item.name] + parseInt(item.quantity) : parseInt(item.quantity);\n        totalNumber += parseInt(item.quantity);\n      });\n    });\n    var ratios = [['Category', 'Quantity sold']];\n    var objectKeysArray = Object.keys(items);\n    objectKeysArray.forEach(objKey => {\n      var objValue = items[objKey]; // objVal holds quantity of each item\n\n      var ration = [objKey, objValue];\n      ratios.push(ration);\n    });\n    return ratios;\n  };\n\n  const DisplayPieChart = () => {\n    SalesDataService.find(store, \"location\").then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    const series = calculateQuantityItems();\n    setdataForPiePlot(series);\n  };\n\n  const calculateMonthlyRevenue = items => {\n    var totalRevenue = 0;\n    items.map(item => {\n      totalRevenue += parseInt(item.quantity) * parseInt(item.price);\n    });\n    return totalRevenue;\n  };\n\n  const DisplayLineChart = () => {\n    // choose a month -> display line chart from that month      \n    SalesDataService.getUnlimited(store, \"location\").then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    var m = [[\"Date\", \"Revenue\"]];\n    sales.map(sale => {\n      const date = dayjs(sale.saleDate).month();\n\n      if (date === month) {\n        var d = dayjs(sale.saleDate).date();\n        console.log();\n        m.push([d, r]);\n      }\n    });\n    console.log(m);\n    setdataForLineChart(m);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"input-group-prepend\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"input-group-text\",\n              id: \"basic-addon3\",\n              children: \"@\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            class: \"form-control\",\n            onChange: OnChangeSetStore,\n            children: locations.map(method => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: method,\n                children: [\" \", method, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 27\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group-append\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-secondary\",\n              type: \"button\",\n              onClick: DisplayPieChart,\n              children: \"Analyze\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        width: '800px',\n        height: '600px',\n        chartType: \"PieChart\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 23\n        }, this),\n        data: dataForPiePlot,\n        options: {\n          title: 'Items and Sales'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row-form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"input-group-prepend\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"input-group-text\",\n              id: \"basic-addon3\",\n              children: \"Month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            class: \"form-control\",\n            onChange: OnChangeSetMonth,\n            children: months.map(method => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: method,\n                children: [\" \", method, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group-append\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-secondary\",\n              type: \"button\",\n              onClick: DisplayLineChart,\n              children: \"Analyze\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        chartType: \"LineChart\",\n        width: \"100%\",\n        height: \"400px\",\n        data: dataForLineChart,\n        options: {\n          title: \"Company Performance\",\n          curveType: \"function\",\n          legend: {\n            position: \"bottom\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AnalyzeSales, \"BIJKqwTw6J31pwXjlaEBDQhSiVM=\");\n\n_c = AnalyzeSales;\nexport default AnalyzeSales; // <div>\n// {\n//       {dataToPlot} ? \n//         <div><Chart\n//           width={'800px'}\n//           height={'600px'}\n//           chartType=\"PieChart\"\n//           loader={<div>Loading Chart</div>}\n//           data={dataToPlot}\n//           options={{\n//             title: 'Items and Sales',\n//           }}\n//         /></div>\n//       :\n//       <div>'Nothing to Dsiplay'</div>\n// }\n// </div>\n\nvar _c;\n\n$RefreshReg$(_c, \"AnalyzeSales\");","map":{"version":3,"sources":["/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/analyze.js"],"names":["React","useEffect","SalesDataService","dayjs","Chart","AnalyzeSales","props","store","setStore","useState","locations","setLocations","dataForPiePlot","setdataForPiePlot","dataForLineChart","setdataForLineChart","sales","setSales","month","setMonth","months","monthlySales","setMontlySales","retrieveLocations","getStoreLocations","then","response","data","catch","e","console","log","OnChangeSetStore","target","value","OnChangeSetMonth","i","calculateQuantityItems","items","totalNumber","map","element","item","name","parseInt","quantity","ratios","objectKeysArray","Object","keys","forEach","objKey","objValue","ration","push","DisplayPieChart","find","Sales","series","calculateMonthlyRevenue","totalRevenue","price","DisplayLineChart","getUnlimited","m","sale","date","saleDate","d","r","method","title","curveType","legend","position"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport SalesDataService from '../services/sales.js' ;\nimport dayjs from 'dayjs' ;\n\nimport { Chart } from \"react-google-charts\";\n\nconst AnalyzeSales = (props) => {\n    // G1 : revenue from each all stores -> min & max = one graph has all stores \n\n    // G2 : percentage of different items sold from a given store - DONE\n     \n    const [store, setStore] = React.useState(\"\")\n    const [locations, setLocations] = React.useState([])\n    const [dataForPiePlot, setdataForPiePlot] = React.useState()\n    const [dataForLineChart, setdataForLineChart] = React.useState()\n    const [sales, setSales] = React.useState([])\n    const [month, setMonth] = React.useState(\"\")\n    const months = ['Jan', 'Feb','March','April','May','June','July','August','September','October','November','December'] \n    const [monthlySales, setMontlySales] = React.useState([])\n        \n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n\n    const retrieveLocations = () => {\n        SalesDataService.getStoreLocations()\n        .then(response => {\n        // console.log(response.data);\n        setLocations(response.data);\n        })\n        .catch(e => {\n        console.log(e);\n        });\n    }\n\n    const OnChangeSetStore = e => {\n        setStore(e.target.value)\n    }\n\n    const OnChangeSetMonth = e => {\n      console.log(e.target.value)\n      for(var i=0;i<12;i++){\n        if(months[i] === e.target.value) {\n          setMonth(i) \n          return  \n        }\n      }\n      return \n    }\n\n    const calculateQuantityItems = () => {\n               \n        var items = {}\n        // {'pencil':3, 'eraser':10}\n        var totalNumber = 0\n        // 13\n\n        sales.map(element => {\n\n            element.items.map(item => {\n              \n              items[item.name]=(items[item.name] ? items[item.name]+parseInt(item.quantity) : parseInt(item.quantity)) \n\n              totalNumber+=parseInt(item.quantity)\n            })\n\n        });\n\n        var ratios = [['Category','Quantity sold']]\n\n        var objectKeysArray = Object.keys(items)\n\n        objectKeysArray.forEach((objKey) => {\n            var objValue = items[objKey]\n            // objVal holds quantity of each item\n            var ration = [objKey, objValue]\n\n            ratios.push(ration)\n        })\n        \n        return ratios\n    }\n    \n    const DisplayPieChart = () => {\n        SalesDataService.find(store, \"location\")\n                .then(response => {\n                  \n                    setSales(response.data.Sales)\n                })\n                .catch(e => {\n                    console.log(e);\n                })\n        \n        const series = calculateQuantityItems()\n\n        setdataForPiePlot(series)\n\n    }\n\n    const calculateMonthlyRevenue = (items) => {\n      var totalRevenue = 0\n      items.map(item => {\n        totalRevenue+=(parseInt(item.quantity)*parseInt(item.price)) \n      })\n      return totalRevenue\n    }\n\n    const DisplayLineChart = () => {\n      \n      // choose a month -> display line chart from that month      \n      SalesDataService.getUnlimited(store, \"location\")\n      .then(response => {        \n          setSales(response.data.Sales)\n      })\n      .catch(e => {\n          console.log(e);\n      })\n\n      var m = [[\"Date\",\"Revenue\"]]\n      \n      sales.map((sale)=>{\n        const date = dayjs(sale.saleDate).month()\n        if(date === month) {\n          var d = dayjs(sale.saleDate).date()\n          console.log()\n          m.push([d, r])\n        }\n      })\n\n      console.log(m)\n      setdataForLineChart(m)\n      \n    }\n\n    return (\n      <div className=\"App\">\n          <div className=\"row form\">            \n              <div className=\"col\">\n              <div className=\"input-group mb-3\">\n                  <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text\" id=\"basic-addon3\">@</span>\n                  </div>\n\n                  <select class=\"form-control\" onChange={OnChangeSetStore}>\n                      {\n                      locations.map(method => {\n                          return (\n                          <option value={method}> {method} </option>\n                          )\n                      })\n                      }\n                  </select>\n\n                  <div className=\"input-group-append\">\n                      <button\n                      className=\"btn btn-outline-secondary\"\n                      type=\"button\"\n                      onClick={DisplayPieChart}\n                      >\n                      Analyze\n                      </button>\n                  </div>\n              </div>\n              </div>\n          </div>\n        \n          <div className=\"row\">\n            <Chart\n              width={'800px'}\n              height={'600px'}\n              chartType=\"PieChart\"\n              loader={<div>Loading Chart</div>}\n              data={dataForPiePlot}\n              options={{\n                title: 'Items and Sales',\n              }}\n            />\n          </div>\n\n          <br/>\n\n          <div className=\"row-form\">\n            <div className=\"col\">\n                <div className=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">Month</span>\n                    </div>\n\n                    <select class=\"form-control\" onChange={OnChangeSetMonth}>\n                        {\n                        months.map(method => {\n                            return (\n                            <option value={method}> {method} </option>\n                            )\n                        })\n                        }\n                    </select>\n\n                    <div className=\"input-group-append\">\n                        <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={DisplayLineChart}\n                        >\n                        Analyze\n                        </button>\n                    </div>\n                </div>\n              </div>\n          </div>\n\n          <div className=\"row\">\n            <Chart\n              chartType=\"LineChart\"\n              width=\"100%\"\n              height=\"400px\"\n              data={dataForLineChart}\n              options={{\n                title: \"Company Performance\",\n                curveType: \"function\",\n                legend: { position: \"bottom\" },\n              }}\n            />    \n          </div>\n\n      </div> \n    );\n\n}\n\nexport default AnalyzeSales;\n\n\n// <div>\n// {\n//       {dataToPlot} ? \n//         <div><Chart\n//           width={'800px'}\n//           height={'600px'}\n//           chartType=\"PieChart\"\n//           loader={<div>Loading Chart</div>}\n//           data={dataToPlot}\n//           options={{\n//             title: 'Items and Sales',\n//           }}\n//         /></div>\n//       :\n//       <div>'Nothing to Dsiplay'</div>\n// }\n// </div>"]},"metadata":{},"sourceType":"module"}