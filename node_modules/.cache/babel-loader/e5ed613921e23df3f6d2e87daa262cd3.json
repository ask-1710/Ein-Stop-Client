{"ast":null,"code":"var _jsxFileName = \"/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/graphs/graph1.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport SalesDataService from '../../services/sales.js';\nimport dayjs from 'dayjs';\nimport { Chart } from \"react-google-charts\";\nimport { Link, Routes, Route } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Graph1 = props => {\n  _s();\n\n  const [sales, setSales] = React.useState([]);\n  const [dataForPiePlot, setdataForPiePlot] = useState(null);\n  const [store, setStore] = useState('');\n  const [locations, setLocations] = React.useState([]);\n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n\n  const retrieveLocations = () => {\n    SalesDataService.getStoreLocations().then(response => {\n      // console.log(response.data);\n      setLocations(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const calculateQuantityItems = () => {\n    var items = {};\n    sales.map(element => {\n      element.items.map(item => {\n        items[item.name] = items[item.name] ? items[item.name] + parseInt(item.quantity) : parseInt(item.quantity);\n      });\n    });\n    var ratios = [['Category', 'Quantity sold']];\n    var objectKeysArray = Object.keys(items);\n    objectKeysArray.forEach(objKey => {\n      var objValue = items[objKey]; // objVal holds quantity of each item\n\n      var ration = [objKey, objValue];\n      ratios.push(ration);\n    });\n    return ratios;\n  };\n\n  const DisplayPieChart = () => {\n    SalesDataService.find(store, \"location\").then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    const series = calculateQuantityItems();\n    setdataForPiePlot(series);\n  };\n\n  const OnChangeSetStore = e => {\n    setStore(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-outline form-white row py-3 col-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        class: \"form-control selectinput\",\n        type: \"select\",\n        onChange: OnChangeSetStore,\n        children: locations.map(method => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: method,\n            children: [\" \", method, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"form-label\",\n        for: \"formWhite2\",\n        children: \"Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group-append inline\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-dark\",\n          onClick: DisplayPieChart,\n          children: \"Analyse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: true,\n      children: dataForPiePlot ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centre\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"jumbotron jumbotron-fluid\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"container\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              class: \"display-6\",\n              children: [\"1. Sales % Of Items in \", store]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          width: '800px',\n          height: '600px',\n          chartType: \"PieChart\",\n          loader: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 23\n          }, this),\n          data: dataForPiePlot,\n          options: {\n            title: `Percentage of items Sold in ${store}`,\n            pieSliceText: \"label\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"jumbotron jumbotron-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            class: \"display-6\",\n            children: \"1. Sales % Of Items in A store\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"lead text-italics\",\n            children: \"Select a store\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Graph1, \"DmZ4TqTeZHOhbmFZWylblcEO1pY=\");\n\n_c = Graph1;\nexport default Graph1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph1\");","map":{"version":3,"sources":["/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/graphs/graph1.component.js"],"names":["React","useEffect","useState","SalesDataService","dayjs","Chart","Link","Routes","Route","Graph1","props","sales","setSales","dataForPiePlot","setdataForPiePlot","store","setStore","locations","setLocations","retrieveLocations","getStoreLocations","then","response","data","catch","e","console","log","calculateQuantityItems","items","map","element","item","name","parseInt","quantity","ratios","objectKeysArray","Object","keys","forEach","objKey","objValue","ration","push","DisplayPieChart","find","Sales","series","OnChangeSetStore","target","value","method","title","pieSliceText"],"mappings":"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","sourcesContent":["import React, { useEffect , useState } from 'react';\nimport SalesDataService from '../../services/sales.js' ;\nimport dayjs from 'dayjs' ;\nimport { Chart } from \"react-google-charts\";\nimport {Link,Routes,Route} from 'react-router-dom';\n\nconst Graph1 = props => {\n\n  const [sales, setSales] = React.useState([])\n  const [dataForPiePlot, setdataForPiePlot] = useState(null)\n  const [store, setStore] = useState('')\n  const [locations, setLocations] = React.useState([])\n     \n    useEffect(() => {\n      retrieveLocations();\n    }, []);\n    \n    const retrieveLocations = () => {\n        SalesDataService.getStoreLocations()\n        .then(response => {\n        // console.log(response.data);\n        setLocations(response.data);\n        })\n        .catch(e => {\n        console.log(e);\n        });\n    }\n\n    const calculateQuantityItems = () => {\n               \n        var items = {}\n        \n        sales.map(element => {\n\n            element.items.map(item => {\n              \n              items[item.name]=(items[item.name] ? items[item.name]+parseInt(item.quantity) : parseInt(item.quantity))\n\n            })\n        });\n        var ratios = [['Category','Quantity sold']]\n        var objectKeysArray = Object.keys(items)\n        objectKeysArray.forEach((objKey) => {\n            var objValue = items[objKey]\n            // objVal holds quantity of each item\n            var ration = [objKey, objValue]\n            ratios.push(ration)\n        })\n        \n        return ratios\n    }\n\n    const DisplayPieChart = () => {\n        SalesDataService.find(store, \"location\")\n                .then(response => {       \n                    setSales(response.data.Sales)\n                })\n                .catch(e => {\n                    console.log(e);\n                })\n        \n        const series = calculateQuantityItems()\n\n        setdataForPiePlot(series)\n    }\n\n    const OnChangeSetStore = e => {\n        setStore(e.target.value)\n    }\n\n    return (\n        <div className='wrapper container'>\n        <div className=\"form-outline form-white row py-3 col-4\">\n        <select class=\"form-control selectinput\" type='select'  onChange={OnChangeSetStore}>\n            {\n              locations.map(method => {\n                return (\n                  <option value={method}> {method} </option>\n                )\n              })\n            }\n          </select>\n          <label class=\"form-label\" for=\"formWhite2\">Location</label>\n          <div className=\"input-group-append inline\">\n              <button className=\"btn btn-outline-dark\" onClick={DisplayPieChart}>Analyse</button>\n          </div>\n      </div>\n      <div className>\n      {\n          dataForPiePlot?(\n        <div className='centre'>\n            <div class=\"jumbotron jumbotron-fluid\">\n            <div class=\"container\">\n              <h1 class=\"display-6\">1. Sales % Of Items in {store}</h1>\n            </div>\n          </div>\n          <Chart\n              width={'800px'}\n              height={'600px'}\n              chartType=\"PieChart\"\n              loader={<div>Loading Chart</div>}\n              data={dataForPiePlot}\n              options={{\n                title: `Percentage of items Sold in ${store}`,\n                pieSliceText: \"label\",\n              }}\n            />\n          </div>) :\n          <div class=\"jumbotron jumbotron-fluid\">\n            <div class=\"container\">\n              <h1 class=\"display-6\">1. Sales % Of Items in A store</h1>\n              <p class=\"lead text-italics\">Select a store</p>\n            </div>\n          </div>\n      }\n      </div>\n      </div>\n    )\n}\n\nexport default Graph1"]},"metadata":{},"sourceType":"module"}