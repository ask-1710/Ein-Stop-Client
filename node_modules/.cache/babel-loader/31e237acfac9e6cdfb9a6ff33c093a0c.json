{"ast":null,"code":"var _jsxFileName = \"/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/analyze.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport SalesDataService from '../services/sales.js';\nimport dayjs from 'dayjs';\nimport { Chart } from \"react-google-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnalyzeSales = props => {\n  _s();\n\n  // G1 : revenue from each all stores -> min & max = one graph has all stores \n  // G2 : percentage of different items sold from a given store - DONE\n  const [store, setStore] = React.useState(\"\");\n  const [locations, setLocations] = React.useState([]);\n  const [dataForPiePlot, setdataForPiePlot] = React.useState([]);\n  const [dataForLineChart, setdataForLineChart] = React.useState([]);\n  const [dataForBarChart, setdataForBarChart] = React.useState([]);\n  const [sales, setSales] = React.useState([]);\n  const [month, setMonth] = React.useState(\"\");\n  const months = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const [queryItem, setItem] = React.useState('');\n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n\n  const retrieveLocations = () => {\n    SalesDataService.getStoreLocations().then(response => {\n      // console.log(response.data);\n      setLocations(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const OnChangeSetStore = e => {\n    setStore(e.target.value);\n    alert(store);\n  };\n\n  const OnChangeSetMonth = e => {\n    console.log(e.target.value);\n\n    for (var i = 0; i < 12; i++) {\n      if (months[i] === e.target.value) {\n        setMonth(i);\n        return;\n      }\n    }\n\n    return;\n  };\n\n  const calculateQuantityItems = () => {\n    var items = {}; // {'pencil':3, 'eraser':10}\n\n    var totalNumber = 0; // 13\n\n    sales.map(element => {\n      element.items.map(item => {\n        items[item.name] = items[item.name] ? items[item.name] + parseInt(item.quantity) : parseInt(item.quantity);\n        totalNumber += parseInt(item.quantity);\n      });\n    });\n    var ratios = [['Category', 'Quantity sold']];\n    var objectKeysArray = Object.keys(items);\n    objectKeysArray.forEach(objKey => {\n      var objValue = items[objKey]; // objVal holds quantity of each item\n\n      var ration = [objKey, objValue];\n      ratios.push(ration);\n    });\n    return ratios;\n  };\n\n  const DisplayPieChart = () => {\n    SalesDataService.find(store, \"location\").then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    const series = calculateQuantityItems();\n    setdataForPiePlot(series);\n  };\n\n  const calculateMonthlyRevenue = items => {\n    // console.log(items) ;\n    var totalRevenue = 0.0;\n    items.map(item => {\n      totalRevenue += parseInt(item.quantity) * item.price['$numberDecimal']; // console.log(totalRevenue)\n    });\n    return totalRevenue;\n  };\n\n  const DisplayLineChart = () => {\n    // choose a month -> display line chart from that month      \n    SalesDataService.getUnlimited(store, \"location\").then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    var m = [[\"Date\", \"Revenue\"]];\n    sales.map(sale => {\n      const date = dayjs(sale.saleDate).month();\n\n      if (date === month) {\n        const d = dayjs(sale.saleDate).date();\n        const r = calculateMonthlyRevenue(sale.items);\n        var flag = 0;\n\n        for (var i = 0; i < m.length; i++) {\n          if (m[i][0] === d) {\n            m[i][1] += r;\n            flag = 1;\n            break;\n          }\n        }\n\n        if (!flag) {\n          m.push([d, r]);\n        }\n      }\n    });\n    m.sort((a, b) => a[0] - b[0]); // console.log(m)\n\n    setdataForLineChart(m);\n  };\n\n  const OnChangeSetItem = e => {\n    setItem(e.target.value);\n  };\n\n  const DisplayBarChart = () => {\n    // sales of an item in all stores\n    // x axis => stores\n    // y axis => quantity of item sold\n    // ACTIONS : probabiliy increase the cost of the item in that branch , increase supply of the item and relevant ones to tht branch\n    SalesDataService.getAll().then(response => {\n      setSales(response.data.Sales);\n    }).catch(e => {\n      console.log(e);\n    });\n    var quant = {};\n    sales.map(sale => {\n      sale.items.map(item => {\n        if (item.name === queryItem) {\n          quant[sale.storeLocation] = quant[sale.storeLocation] ? quant[sale.storeLocation] + parseInt(item.quantity) : parseInt(item.quantity);\n        }\n      });\n    });\n    var data = [['Store', 'Quantity']];\n    var objectKeysArray = Object.keys(quant);\n    objectKeysArray.forEach(objKey => {\n      var objValue = quant[objKey];\n      console.log(objKey, objValue); // objVal holds  of each item\n\n      var q = [objKey, objValue];\n      data.push(q);\n    });\n    setdataForBarChart(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"input-group-prepend\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"input-group-text\",\n              id: \"basic-addon3\",\n              children: \"@\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            class: \"form-control\",\n            onChange: OnChangeSetStore,\n            children: locations.map(method => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: method,\n                children: [\" \", method, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group-append\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-secondary\",\n              type: \"button\",\n              onClick: DisplayPieChart,\n              children: \"Analyze\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"input-group-prepend\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"input-group-text\",\n              id: \"basic-addon3\",\n              children: \"Month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            class: \"form-control\",\n            onChange: OnChangeSetMonth,\n            children: months.map(method => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: method,\n                children: [\" \", method, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group-append\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-secondary\",\n              type: \"button\",\n              onClick: DisplayLineChart,\n              children: \"Analyze\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"input-group-prepend\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"input-group-text\",\n              id: \"basic-addon3\",\n              children: \"Item\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            class: \"form-control\",\n            onChange: OnChangeSetItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group-append\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-secondary\",\n              type: \"button\",\n              onClick: DisplayBarChart,\n              children: \"Analyze\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: dataForPiePlot ? /*#__PURE__*/_jsxDEV(Chart, {\n        width: '800px',\n        height: '600px',\n        chartType: \"PieChart\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 25\n        }, this),\n        data: dataForPiePlot,\n        options: {\n          title: 'Items and Sales'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 31\n      }, this) : 'Select a Store to display chart'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: dataForLineChart ? /*#__PURE__*/_jsxDEV(Chart, {\n        chartType: \"LineChart\",\n        width: \"100%\",\n        height: \"400px\",\n        data: dataForLineChart,\n        options: {\n          title: `Revenue in ${store} in the month of ${months[month]}`,\n          curveType: \"function\",\n          legend: {\n            position: \"bottom\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 33\n      }, this) : 'Select Store and Month to display Revenue chart'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: dataForBarChart ? /*#__PURE__*/_jsxDEV(Chart, {\n        chartType: \"BarChart\",\n        width: \"100%\",\n        height: \"400px\",\n        data: dataForBarChart,\n        options: {\n          title: `Demand for ${queryItem}`,\n          curveType: \"function\",\n          legend: {\n            position: \"bottom\"\n          },\n          hAxis: {\n            title: `Total Sales of ${queryItem}`,\n            minValue: 0\n          },\n          vAxis: {\n            title: \"City\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 32\n      }, this) : 'Enter an Item display Demand chart'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AnalyzeSales, \"rH/9Ks6xNuE37f7iIzMsFMvVkV8=\");\n\n_c = AnalyzeSales;\nexport default AnalyzeSales;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnalyzeSales\");","map":{"version":3,"sources":["/home/aarthi/fitgit/react/einduch-stop/frontend/src/components/analyze.js"],"names":["React","useEffect","SalesDataService","dayjs","Chart","AnalyzeSales","props","store","setStore","useState","locations","setLocations","dataForPiePlot","setdataForPiePlot","dataForLineChart","setdataForLineChart","dataForBarChart","setdataForBarChart","sales","setSales","month","setMonth","months","queryItem","setItem","retrieveLocations","getStoreLocations","then","response","data","catch","e","console","log","OnChangeSetStore","target","value","alert","OnChangeSetMonth","i","calculateQuantityItems","items","totalNumber","map","element","item","name","parseInt","quantity","ratios","objectKeysArray","Object","keys","forEach","objKey","objValue","ration","push","DisplayPieChart","find","Sales","series","calculateMonthlyRevenue","totalRevenue","price","DisplayLineChart","getUnlimited","m","sale","date","saleDate","d","r","flag","length","sort","a","b","OnChangeSetItem","DisplayBarChart","getAll","quant","storeLocation","q","method","title","curveType","legend","position","hAxis","minValue","vAxis"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport SalesDataService from '../services/sales.js' ;\nimport dayjs from 'dayjs' ;\n\nimport { Chart } from \"react-google-charts\";\n\nconst AnalyzeSales = (props) => {\n    // G1 : revenue from each all stores -> min & max = one graph has all stores \n\n    // G2 : percentage of different items sold from a given store - DONE\n     \n    const [store, setStore] = React.useState(\"\")\n    const [locations, setLocations] = React.useState([])\n    const [dataForPiePlot, setdataForPiePlot] = React.useState([])\n    const [dataForLineChart, setdataForLineChart] = React.useState([])\n    const [dataForBarChart, setdataForBarChart] = React.useState([])\n    const [sales, setSales] = React.useState([])\n    const [month, setMonth] = React.useState(\"\")\n    const months = ['Jan', 'Feb','March','April','May','June','July','August','September','October','November','December'] \n    const [queryItem, setItem] = React.useState('')\n        \n  useEffect(() => {\n    retrieveLocations();\n  }, []);\n\n    const retrieveLocations = () => {\n        SalesDataService.getStoreLocations()\n        .then(response => {\n        // console.log(response.data);\n        setLocations(response.data);\n        })\n        .catch(e => {\n        console.log(e);\n        });\n    }\n\n    const OnChangeSetStore = e => {\n        setStore(e.target.value)\n        alert(store)\n    }\n\n    const OnChangeSetMonth = e => {\n      console.log(e.target.value)\n      for(var i=0;i<12;i++){\n        if(months[i] === e.target.value) {\n          setMonth(i) \n          return  \n        }\n      }\n      return \n    }\n\n    const calculateQuantityItems = () => {\n               \n        var items = {}\n        // {'pencil':3, 'eraser':10}\n        var totalNumber = 0\n        // 13\n\n        sales.map(element => {\n\n            element.items.map(item => {\n              \n              items[item.name]=(items[item.name] ? items[item.name]+parseInt(item.quantity) : parseInt(item.quantity)) \n\n              totalNumber+=parseInt(item.quantity)\n            })\n\n        });\n\n        var ratios = [['Category','Quantity sold']]\n\n        var objectKeysArray = Object.keys(items)\n\n        objectKeysArray.forEach((objKey) => {\n            var objValue = items[objKey]\n            // objVal holds quantity of each item\n            var ration = [objKey, objValue]\n\n            ratios.push(ration)\n        })\n        \n        return ratios\n    }\n    \n    const DisplayPieChart = () => {\n        SalesDataService.find(store, \"location\")\n                .then(response => {\n                  \n                    setSales(response.data.Sales)\n                })\n                .catch(e => {\n                    console.log(e);\n                })\n        \n        const series = calculateQuantityItems()\n\n        setdataForPiePlot(series)\n\n    }\n\n    const calculateMonthlyRevenue = (items) => {\n      // console.log(items) ;\n      var totalRevenue = 0.0\n      items.map(item => {\n        totalRevenue+=(parseInt(item.quantity)*item.price['$numberDecimal']) \n        // console.log(totalRevenue)\n      })\n      return totalRevenue\n    }\n\n    const DisplayLineChart = () => {\n      \n      // choose a month -> display line chart from that month      \n      SalesDataService.getUnlimited(store, \"location\")\n      .then(response => {        \n          setSales(response.data.Sales)\n      })\n      .catch(e => {\n          console.log(e);\n      })\n\n      var m = [[\"Date\",\"Revenue\"]]\n      \n      sales.map((sale)=>{\n        const date = dayjs(sale.saleDate).month()\n        if(date === month) {\n          const d = dayjs(sale.saleDate).date()\n          const r = calculateMonthlyRevenue(sale.items) \n          \n          var flag = 0\n          for(var i=0;i<m.length;i++) {\n            if(m[i][0] === d) {\n              m[i][1]+=r\n              flag = 1\n              break\n            }\n          }\n          if(!flag) {\n            m.push([d,r])\n          }\n        }\n      })\n      m.sort((a,b)=>a[0]-b[0])\n      // console.log(m)\n      setdataForLineChart(m)\n      \n    }\n\n    const OnChangeSetItem = (e) => {\n      setItem(e.target.value)\n    }\n\n    const DisplayBarChart = () => {\n      // sales of an item in all stores\n      // x axis => stores\n      // y axis => quantity of item sold\n\n      // ACTIONS : probabiliy increase the cost of the item in that branch , increase supply of the item and relevant ones to tht branch\n\n      SalesDataService.getAll()\n      .then(response => {\n        setSales(response.data.Sales);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n\n        var quant = {}        \n\n        sales.map(sale => {\n          sale.items.map(item => {\n            if(item.name === queryItem) {\n              quant[sale.storeLocation] = (quant[sale.storeLocation] ? quant[sale.storeLocation] + parseInt(item.quantity) : parseInt(item.quantity))\n            }\n          })\n        })\n        \n        var data = [['Store', 'Quantity']]\n\n        var objectKeysArray = Object.keys(quant)\n\n        objectKeysArray.forEach((objKey) => {\n            var objValue = quant[objKey]\n            console.log(objKey, objValue)\n            // objVal holds  of each item\n            var q = [objKey, objValue]\n            data.push(q)            \n        })\n\n        setdataForBarChart(data) \n    }\n\n    return (\n      <div className=\"App\">\n          <div className=\"row form\">            \n              <div className=\"col\">\n                <div className=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">@</span>\n                    </div>\n\n                    <select class=\"form-control\" onChange={OnChangeSetStore}>\n                        {\n                        locations.map(method => {\n                            return (\n                            <option value={method}> {method} </option>\n                            )\n                        })\n                        }\n                    </select>\n\n                    <div className=\"input-group-append\">\n                        <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={DisplayPieChart}\n                        >\n                        Analyze\n                        </button>\n                    </div>\n                </div>\n              </div>\n\n              <div className=\"col\">\n                <div className=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">Month</span>\n                    </div>\n\n                    <select class=\"form-control\" onChange={OnChangeSetMonth}>\n                        {\n                        months.map(method => {\n                            return (\n                            <option value={method}> {method} </option>\n                            )\n                        })\n                        }\n                    </select>\n\n                    <div className=\"input-group-append\">\n                        <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={DisplayLineChart}\n                        >\n                        Analyze\n                        </button>\n                    </div>\n                </div>\n              </div>\n\n              <div className=\"col\">\n                <div className=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">Item</span>\n                    </div>\n\n                    <input class=\"form-control\"  onChange={OnChangeSetItem}>\n                    </input>\n\n                    <div className=\"input-group-append\">\n                        <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={DisplayBarChart}\n                        >\n                        Analyze\n                        </button>\n                    </div>\n                </div>\n              </div>   \n\n          </div>\n        \n          <div className=\"row\">\n            {\n              dataForPiePlot?(<Chart\n                width={'800px'}\n                height={'600px'}\n                chartType=\"PieChart\"\n                loader={<div>Loading Chart</div>}\n                data={dataForPiePlot}\n                options={{\n                  title: 'Items and Sales',\n                }}\n              />) :\n              'Select a Store to display chart'\n            }\n            \n          </div>\n          <br/>\n          <div className=\"row\">\n            {\n              dataForLineChart?(<Chart\n                chartType=\"LineChart\"\n                width=\"100%\"\n                height=\"400px\"\n                data={dataForLineChart}\n                options={{\n                  title: `Revenue in ${store} in the month of ${months[month]}`,\n                  curveType: \"function\",\n                  legend: { position: \"bottom\" },\n                }}\n              /> ) :\n              'Select Store and Month to display Revenue chart'\n            }\n               \n          </div>\n          <br/>\n          <div className=\"row\">\n            {\n              dataForBarChart?(<Chart\n                chartType=\"BarChart\"\n                width=\"100%\"\n                height=\"400px\"\n                data={dataForBarChart}\n                options={{\n                  title: `Demand for ${queryItem}`,\n                  curveType: \"function\",\n                  legend: { position: \"bottom\" } ,\n                  hAxis: {\n                    title: `Total Sales of ${queryItem}`,\n                    minValue: 0,\n                  },\n                  vAxis: {\n                    title: \"City\",\n                  },\n                }}\n              /> ) :\n              'Enter an Item display Demand chart'\n            }\n               \n          </div>\n\n      </div> \n    );\n\n}\n\nexport default AnalyzeSales;\n"]},"metadata":{},"sourceType":"module"}